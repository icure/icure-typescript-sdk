/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { DocIdentifier } from '../model/DocIdentifier'
import { FilterChainMaintenanceTask } from '../model/FilterChainMaintenanceTask'
import { MaintenanceTask } from '../model/MaintenanceTask'
import { PaginatedListMaintenanceTask } from '../model/PaginatedListMaintenanceTask'

export class IccMaintenanceTaskApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Creates a maintenanceTask
   * @param body
   */
  createMaintenanceTask(body?: MaintenanceTask): Promise<MaintenanceTask> {
    let _body = null
    _body = body

    const _url = this.host + `/maintenancetask` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new MaintenanceTask(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Delete maintenanceTasks
   * @param maintenanceTaskIds
   */
  deleteMaintenanceTask(maintenanceTaskIds: string): Promise<Array<DocIdentifier>> {
    let _body = null

    const _url = this.host + `/maintenancetask/${encodeURIComponent(String(maintenanceTaskIds))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of maintenanceTasks along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter maintenanceTasks for the current user (HcParty)
   * @param body
   * @param startDocumentId A maintenanceTask document ID
   * @param limit Number of rows
   */
  filterMaintenanceTasksBy(startDocumentId?: string, limit?: number, body?: FilterChainMaintenanceTask): Promise<PaginatedListMaintenanceTask> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/maintenancetask/filter` +
      '?ts=' +
      new Date().getTime() +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new PaginatedListMaintenanceTask(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets a maintenanceTask
   * @param maintenanceTaskId
   */
  getMaintenanceTask(maintenanceTaskId: string): Promise<MaintenanceTask> {
    let _body = null

    const _url = this.host + `/maintenancetask/${encodeURIComponent(String(maintenanceTaskId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => new MaintenanceTask(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Updates a maintenanceTask
   * @param body
   */
  modifyMaintenanceTask(body?: MaintenanceTask): Promise<MaintenanceTask> {
    let _body = null
    _body = body

    const _url = this.host + `/maintenancetask` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => new MaintenanceTask(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }
}
