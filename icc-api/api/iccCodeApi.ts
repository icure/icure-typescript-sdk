/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { CodeDto } from "../model/CodeDto"
import { FilterChainCode } from "../model/FilterChainCode"
import { PaginatedListCodeDto } from "../model/PaginatedListCodeDto"

export class iccCodeApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError) {
    throw e
  }

  /**
   * Type, Code and Version are required.
   * @summary Create a Code
   * @param body
   */
  createCode(body?: CodeDto): Promise<CodeDto | any> {
    let _body = null
    _body = body

    const _url = this.host + `/code` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of codes along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter codes
   * @param body
   * @param startKey The start key for pagination, depends on the filters used
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   * @param skip Skip rows
   * @param sort Sort key
   * @param desc Descending
   */
  filterCodesBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    skip?: number,
    sort?: string,
    desc?: boolean,
    body?: FilterChainCode
  ): Promise<PaginatedListCodeDto | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/code/filter` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (skip ? "&skip=" + encodeURIComponent(String(skip)) : "") +
      (sort ? "&sort=" + encodeURIComponent(String(sort)) : "") +
      (desc ? "&desc=" + encodeURIComponent(String(desc)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListCodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of code types matched with given input.
   * @summary Finding code types.
   * @param region Code region
   * @param type Code type
   */
  findCodeTypes(region?: string, type?: string): Promise<Array<string> | any> {
    let _body = null

    const _url =
      this.host +
      `/code/codetype/byRegionType` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version
   * @param region Code region
   * @param type Code type
   * @param code Code code
   * @param version Code version
   */
  findCodes(
    region?: string,
    type?: string,
    code?: string,
    version?: string
  ): Promise<Array<CodeDto> | any> {
    let _body = null

    const _url =
      this.host +
      `/code/byRegionTypeCode` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "") +
      (code ? "&code=" + encodeURIComponent(String(code)) : "") +
      (version ? "&version=" + encodeURIComponent(String(version)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new CodeDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version with pagination.
   * @param region
   * @param type
   * @param code
   * @param version
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodes(
    region?: string,
    type?: string,
    code?: string,
    version?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCodeDto | any> {
    let _body = null

    const _url =
      this.host +
      `/code` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "") +
      (code ? "&code=" + encodeURIComponent(String(code)) : "") +
      (version ? "&version=" + encodeURIComponent(String(version)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListCodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of codes matched with given input. If several types are provided, pagination is not supported
   * @summary Finding codes by code, type and version with pagination.
   * @param region
   * @param types
   * @param language
   * @param label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodesByLabel(
    region?: string,
    types?: string,
    language?: string,
    label?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCodeDto | any> {
    let _body = null

    const _url =
      this.host +
      `/code/byLabel` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (types ? "&types=" + encodeURIComponent(String(types)) : "") +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListCodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version with pagination.
   * @param linkType
   * @param linkedId
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodesWithLink(
    linkType: string,
    linkedId?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCodeDto | any> {
    let _body = null

    const _url =
      this.host +
      `/code/link/${encodeURIComponent(String(linkType))}` +
      "?ts=" +
      new Date().getTime() +
      (linkedId ? "&linkedId=" + encodeURIComponent(String(linkedId)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListCodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of tag types matched with given input.
   * @summary Finding tag types.
   * @param region Code region
   * @param type Code type
   */
  findTagTypes(region?: string, type?: string): Promise<Array<string> | any> {
    let _body = null

    const _url =
      this.host +
      `/code/tagtype/byRegionType` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }

  /**
   * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
   * @summary Get a code
   * @param codeId Code id
   */
  getCode(codeId: string): Promise<CodeDto | any> {
    let _body = null

    const _url =
      this.host + `/code/${encodeURIComponent(String(codeId))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
   * @summary Get a code
   * @param type Code type
   * @param code Code code
   * @param version Code version
   */
  getCodeWithParts(type: string, code: string, version: string): Promise<CodeDto | any> {
    let _body = null

    const _url =
      this.host +
      `/code/${encodeURIComponent(String(type))}/${encodeURIComponent(
        String(code)
      )}/${encodeURIComponent(String(version))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Keys must be delimited by coma
   * @summary Get a list of codes by ids
   * @param codeIds
   */
  getCodes(codeIds: string): Promise<Array<CodeDto> | any> {
    let _body = null

    const _url =
      this.host +
      `/code/byIds/${encodeURIComponent(String(codeIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new CodeDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   * Modification of (type, code, version) is not allowed.
   * @summary Modify a code
   * @param body
   */
  modifyCode(body?: CodeDto): Promise<CodeDto | any> {
    let _body = null
    _body = body

    const _url = this.host + `/code` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
