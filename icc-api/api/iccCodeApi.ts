/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class iccCodeApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  createCode(body?: models.CodeDto): Promise<models.CodeDto | any> {
    let _body = null
    _body = body

    const _url = this.host + "/code" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  filterBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    skip?: number,
    sort?: string,
    desc?: boolean,
    body?: models.FilterChain
  ): Promise<models.CodePaginatedList | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/code/filter" +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (skip ? "&skip=" + skip : "") +
      (sort ? "&sort=" + sort : "") +
      (desc ? "&desc=" + desc : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  findCodeTypes(region?: string, type?: string): Promise<Array<string> | any> {
    let _body = null

    const _url =
      this.host +
      "/code/codetype/byRegionType" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  findCodes(
    region?: string,
    type?: string,
    code?: string,
    version?: string
  ): Promise<Array<models.CodeDto> | any> {
    let _body = null

    const _url =
      this.host +
      "/code/byRegionTypeCode" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "") +
      (code ? "&code=" + code : "") +
      (version ? "&version=" + version : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.CodeDto(it)))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodes(
    region?: string,
    type?: string,
    code?: string,
    version?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.CodePaginatedList | any> {
    let _body = null

    const _url =
      this.host +
      "/code" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "") +
      (code ? "&code=" + code : "") +
      (version ? "&version=" + version : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodesByLabel(
    region?: string,
    types?: string,
    language?: string,
    label?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.CodePaginatedList | any> {
    let _body = null

    const _url =
      this.host +
      "/code/byLabel" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (types ? "&types=" + types : "") +
      (language ? "&language=" + language : "") +
      (label ? "&label=" + label : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodesWithLink(
    linkType: string,
    linkedId?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.CodePaginatedList | any> {
    let _body = null

    const _url =
      this.host +
      "/code/link/{linkType}".replace("{linkType}", linkType + "") +
      "?ts=" +
      new Date().getTime() +
      (linkedId ? "&linkedId=" + linkedId : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  findTagTypes(region?: string, type?: string): Promise<Array<string> | any> {
    let _body = null

    const _url =
      this.host +
      "/code/tagtype/byRegionType" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  getCode(codeId: string): Promise<models.CodeDto | any> {
    let _body = null

    const _url =
      this.host + "/code/{codeId}".replace("{codeId}", codeId + "") + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getCodeWithParts(type: string, code: string, version: string): Promise<models.CodeDto | any> {
    let _body = null

    const _url =
      this.host +
      "/code/{type}/{code}/{version}"
        .replace("{type}", type + "")
        .replace("{code}", code + "")
        .replace("{version}", version + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getCodes(codeIds: string): Promise<Array<models.CodeDto> | any> {
    let _body = null

    const _url =
      this.host +
      "/code/byIds/{codeIds}".replace("{codeIds}", codeIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.CodeDto(it)))
      .catch(err => this.handleError(err))
  }
  modifyCode(body?: models.CodeDto): Promise<models.CodeDto | any> {
    let _body = null
    _body = body

    const _url = this.host + "/code" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
