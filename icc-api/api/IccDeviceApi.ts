/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { AbstractFilterDevice } from '../model/AbstractFilterDevice'
import { Device } from '../model/Device'
import { DocIdentifier } from '../model/DocIdentifier'
import { FilterChainDevice } from '../model/FilterChainDevice'
import { IdWithRev } from '../model/IdWithRev'
import { ListOfIds } from '../model/ListOfIds'
import { PaginatedListDevice } from '../model/PaginatedListDevice'

export class IccDeviceApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   * Name, last name, date of birth, and gender are required. After creation of the device and obtaining the ID, you need to create an initial delegation.
   * @summary Create a device
   * @param body
   */
  createDevice(body?: Device): Promise<Device> {
    let _body = null
    _body = body

    const _url = this.host + `/device` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Device(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * One of Name or Last name+First name, Nihii, and Public key are required.
   * @summary Create a device
   * @param body
   * @param groupId
   */
  createDeviceInGroup(groupId: string, body?: Device): Promise<Device> {
    let _body = null
    _body = body

    const _url = this.host + `/device/inGroup/${encodeURIComponent(String(groupId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Device(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the id and _rev of created devices
   * @summary Create devices in bulk
   * @param body
   */
  createDevices(body?: Array<Device>): Promise<Array<IdWithRev>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/batch` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IdWithRev(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the id and _rev of created devices
   * @summary Create devices in bulk
   * @param body
   */
  createDevices1(body?: Array<Device>): Promise<Array<IdWithRev>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/bulk` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IdWithRev(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Response contains the id/rev of deleted device.
   * @summary Delete device.
   * @param deviceId
   */
  deleteDevice(deviceId: string): Promise<DocIdentifier> {
    let _body = null

    const _url = this.host + `/device/${encodeURIComponent(String(deviceId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl)
      .then((doc) => new DocIdentifier(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Response is an array containing the id/rev of deleted devices.
   * @summary Delete devices.
   * @param body
   */
  deleteDevices(body?: ListOfIds): Promise<Array<DocIdentifier>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/delete/batch` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Deleting a device. Response is an array containing the id of deleted device.
   * @summary Delete a device
   * @param groupId
   * @param deviceIds
   */
  deleteDevicesInGroup(groupId: string, deviceIds: string): Promise<Array<DocIdentifier>> {
    let _body = null

    const _url =
      this.host + `/device/inGroup/${encodeURIComponent(String(groupId))}/${encodeURIComponent(String(deviceIds))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of devices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter devices for the current user (HcParty)
   * @param body
   * @param startDocumentId A device document ID
   * @param limit Number of rows
   */
  filterDevicesBy(startDocumentId?: string, limit?: number, body?: FilterChainDevice): Promise<PaginatedListDevice> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/device/filter` +
      '?ts=' +
      new Date().getTime() +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new PaginatedListDevice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * It gets device administrative data.
   * @summary Get Device
   * @param deviceId
   */
  getDevice(deviceId: string): Promise<Device> {
    let _body = null

    const _url = this.host + `/device/${encodeURIComponent(String(deviceId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Device(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES keys)
   * @summary Get the HcParty encrypted AES keys indexed by owner.
   * @param deviceId
   */
  getDeviceAesExchangeKeysForDelegate(deviceId: string): Promise<{ [key: string]: { [key: string]: { [key: string]: string } } }> {
    let _body = null

    const _url = this.host + `/device/${encodeURIComponent(String(deviceId))}/aesExchangeKeys` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
   * @summary Get the HcParty encrypted AES keys indexed by owner
   * @param deviceId The deviceId Id for which information is shared
   */
  getDeviceHcPartyKeysForDelegate(deviceId: string): Promise<{ [key: string]: string }> {
    let _body = null

    const _url = this.host + `/device/${encodeURIComponent(String(deviceId))}/keys` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   * It gets device administrative data.
   * @summary Get devices by id
   * @param body
   */
  getDevices(body?: ListOfIds): Promise<Array<Device>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/byIds` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Device(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * General information about the device
   * @summary Get devices by their IDs
   * @param body
   * @param groupId
   */
  getDevicesInGroup(groupId: string, body?: ListOfIds): Promise<Array<Device>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/inGroup/${encodeURIComponent(String(groupId))}/byIds` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Device(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get ids of devices matching the provided filter for the current user (HcParty)
   * @param body
   */
  matchDevicesBy(body?: AbstractFilterDevice): Promise<Array<string>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/match` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => JSON.parse(JSON.stringify(it))))
      .catch((err) => this.handleError(err))
  }

  /**
   * No particular return value. It's just a message.
   * @summary Modify a Device.
   * @param body
   * @param groupId
   */
  modifyDeviceInGroup(groupId: string, body?: Device): Promise<Device> {
    let _body = null
    _body = body

    const _url = this.host + `/device/inGroup/${encodeURIComponent(String(groupId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Device(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the updated device
   * @summary Modify a device
   * @param body
   */
  updateDevice(body?: Device): Promise<Device> {
    let _body = null
    _body = body

    const _url = this.host + `/device` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Device(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the id and _rev of modified devices
   * @summary Modify devices in bulk
   * @param body
   */
  updateDevices(body?: Array<Device>): Promise<Array<IdWithRev>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/batch` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IdWithRev(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the id and _rev of modified devices
   * @summary Modify devices in bulk
   * @param body
   */
  updateDevices1(body?: Array<Device>): Promise<Array<IdWithRev>> {
    let _body = null
    _body = body

    const _url = this.host + `/device/bulk` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IdWithRev(it)))
      .catch((err) => this.handleError(err))
  }
}
