/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"

export class iccBeresultexportApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  /**
   *
   * @summary Export data
   * @param body
   * @param fromHcpId
   * @param toHcpId
   * @param patId
   * @param date
   * @param ref
   */
  exportHealthOne(
    fromHcpId: string,
    toHcpId: string,
    patId: string,
    date: number,
    ref: string,
    body?: Array<string>
  ): Promise<ArrayBuffer | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_result_export/hl1/${encodeURIComponent(String(fromHcpId))}/${encodeURIComponent(String(toHcpId))}/${encodeURIComponent(String(patId))}/${encodeURIComponent(String(date))}/${encodeURIComponent(String(ref))}"
        .replace("{fromHcpId}", fromHcpId + "")
        .replace("{toHcpId}", toHcpId + "")
        .replace("{patId}", patId + "")
        .replace("{date}", date + "")
        .replace("{ref}", ref + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Export data
   * @param body
   * @param fromHcpId
   * @param toHcpId
   * @param patId
   * @param date
   * @param ref
   * @param mimeType
   */
  exportKmehrReport(
    fromHcpId: string,
    toHcpId: string,
    patId: string,
    date: number,
    ref: string,
    mimeType?: boolean,
    body?: Array<string>
  ): Promise<ArrayBuffer | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_result_export/kmehrreport/${encodeURIComponent(String(fromHcpId))}/${encodeURIComponent(String(toHcpId))}/${encodeURIComponent(String(patId))}/${encodeURIComponent(String(date))}/${encodeURIComponent(String(ref))}"
        .replace("{fromHcpId}", fromHcpId + "")
        .replace("{toHcpId}", toHcpId + "")
        .replace("{patId}", patId + "")
        .replace("{date}", date + "")
        .replace("{ref}", ref + "") +
      "?ts=" +
      new Date().getTime() +
      (mimeType ? "&mimeType=" + mimeType : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Export data
   * @param body
   * @param fromHcpId
   * @param toHcpId
   * @param patId
   * @param date
   * @param ref
   */
  exportMedidoc(
    fromHcpId: string,
    toHcpId: string,
    patId: string,
    date: number,
    ref: string,
    body?: Array<string>
  ): Promise<ArrayBuffer | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_result_export/medidoc/${encodeURIComponent(String(fromHcpId))}/${encodeURIComponent(String(toHcpId))}/${encodeURIComponent(String(patId))}/${encodeURIComponent(String(date))}/${encodeURIComponent(String(ref))}"
        .replace("{fromHcpId}", fromHcpId + "")
        .replace("{toHcpId}", toHcpId + "")
        .replace("{patId}", patId + "")
        .replace("{date}", date + "")
        .replace("{ref}", ref + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
}
