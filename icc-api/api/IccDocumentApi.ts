/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { DocIdentifier } from '../model/DocIdentifier'
import { Document } from '../model/Document'
import { IcureStub } from '../model/IcureStub'
import { ListOfIds } from '../model/ListOfIds'
import { AuthenticationProvider, NoAuthenticationProvider } from '../../icc-x-api/auth/AuthenticationProvider'
import { iccRestApiPath } from './IccRestApiPath'
import { EntityShareOrMetadataUpdateRequest } from '../model/requests/EntityShareOrMetadataUpdateRequest'
import { EntityBulkShareResult } from '../model/requests/EntityBulkShareResult'
import { BulkShareOrUpdateMetadataParams } from '../model/requests/BulkShareOrUpdateMetadataParams'
import { PaginatedListDocument } from '../model/PaginatedListDocument'

export class IccDocumentApi {
  host: string
  _headers: Array<XHR.Header>
  authenticationProvider: AuthenticationProvider
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  get headers(): Promise<Array<XHR.Header>> {
    return Promise.resolve(this._headers)
  }

  constructor(
    host: string,
    headers: any,
    authenticationProvider?: AuthenticationProvider,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = iccRestApiPath(host)
    this._headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.authenticationProvider = !!authenticationProvider ? authenticationProvider : new NoAuthenticationProvider()
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this._headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   * Creates a document and returns an instance of created document afterward
   * @summary Create a document
   * @param body
   */
  async createDocument(body?: Document): Promise<Document> {
    const _url = this.host + `/document` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Deletes a document's attachment and returns the modified document instance afterward
   * @summary Delete a document's attachment
   * @param documentId
   */
  async deleteAttachment(documentId: string): Promise<Document> {
    let _body = null

    const _url = this.host + `/document/${encodeURIComponent(String(documentId))}/attachment` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a batch of documents and returns the list of deleted document ids.
   *
   * @param documentIds a ListOfIds containing the ids of the documents to delete.
   * @return a Promise that will resolve in an array of DocIdentifier of the successfully deleted documents.
   */
  async deleteDocuments(documentIds: ListOfIds): Promise<Array<DocIdentifier>> {
    const headers = (await this.headers).filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand(
      'POST',
      this.host + `/document/delete/batch` + '?ts=' + new Date().getTime(),
      headers,
      documentIds,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a single document by id.
   *
   * @param documentId the id of the document to delete.
   * @return a DocIdentifier of the document.
   */
  async deleteDocument(documentId: string): Promise<DocIdentifier> {
    return XHR.sendCommand(
      'DELETE',
      this.host + `/document/${encodeURIComponent(documentId)}` + '?ts=' + new Date().getTime(),
      await this.headers,
      null,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => new DocIdentifier(doc.body))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by coma
   * @summary List documents found By type, By Healthcare Party and secret foreign keys.
   * @param documentTypeCode
   * @param hcPartyId
   * @param secretFKeys
   */
  async findByTypeHCPartyMessageSecretFKeys(documentTypeCode: string, hcPartyId: string, secretFKeys: string): Promise<Array<Document>> {
    let _body = null

    const _url =
      this.host +
      `/document/byTypeHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (documentTypeCode ? '&documentTypeCode=' + encodeURIComponent(String(documentTypeCode)) : '') +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '') +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by commas.
   * @summary List documents found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  async findDocumentsByHCPartyPatientForeignKeys(hcPartyId: string, secretFKeys: string): Promise<Array<Document>> {
    let _body = null

    const _url =
      this.host +
      `/document/byHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '') +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary List documents found By Healthcare Party and a single secret foreign key with pagination.
   * @param hcPartyId the healthcare party id.
   * @param secretFKey the secret foreign key.
   * @param startKey the startKey provided by the previous page or undefined for the first page.
   * @param startDocumentId the startDocumentId provided by the previous page or undefined for the first page.
   * @param limit the number of elements that the page should contain.
   * @return a promise that will resolve in a PaginatedListDocument.
   */
  async findDocumentsByHCPartyPatientForeignKey(
    hcPartyId: string,
    secretFKey: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListDocument> {
    const _url =
      this.host +
      `/document/byHcPartySecretForeignKey?ts=${new Date().getTime()}` +
      `&hcPartyId=${encodeURIComponent(hcPartyId)}` +
      `&secretFKey=${encodeURIComponent(secretFKey)}` +
      (!!startKey ? `&startKey=${encodeURIComponent(startKey)}` : '') +
      (!!startDocumentId ? `&startDocumentId=${encodeURIComponent(startDocumentId)}` : '') +
      (!!limit ? `&limit=${limit}` : '')
    const headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, null, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListDocument(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by commas.
   * @summary List documents with no delegation
   * @param limit
   */
  async findWithoutDelegation(limit?: number): Promise<Array<Document>> {
    let _body = null

    const _url = this.host + `/document/woDelegation` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the document corresponding to the identifier passed in the request
   * @summary Get a document
   * @param documentId
   */
  async getDocument(documentId: string): Promise<Document> {
    let _body = null

    const _url = this.host + `/document/${encodeURIComponent(String(documentId))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @deprecated use getMainDocumentAttachment instead
   */
  async getDocumentAttachment(documentId: string, attachmentId: string, enckeys?: string, fileName?: string): Promise<ArrayBuffer> {
    if (enckeys) {
      throw new Error('Server-side encryption of attachment is not allowed anymore')
    }
    return this.getMainDocumentAttachment(documentId)
  }

  /**
   * Get the main attachment of a document
   * @param documentId id of the document
   * @return the content of the main attachment for the document (if any)
   */
  async getMainDocumentAttachment(documentId: string): Promise<ArrayBuffer> {
    let _body = null

    const _url = this.host + `/document/${encodeURIComponent(String(documentId))}/attachment` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => doc.body)
      .catch((err) => this.handleError(err))
  }

  /**
   * Get the main attachment of a document forcing usage of `application/octet-stream` in Content-Type
   * @param documentId id of the document
   * @return the content of the main attachment for the document (if any)
   */
  async getRawMainDocumentAttachment(documentId: string): Promise<ArrayBuffer> {
    let _body = null

    const _url = this.host + `/document/${encodeURIComponent(String(documentId))}/attachment` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, 'application/octet-stream', this.authenticationProvider.getAuthService())
      .then((doc) => doc.body)
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the first document corresponding to the externalUuid passed in the request
   * @summary Get a document
   * @param externalUuid
   */
  async getDocumentByExternalUuid(externalUuid: string): Promise<Document> {
    let _body = null

    const _url = this.host + `/document/externaluuid/${encodeURIComponent(String(externalUuid))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of document corresponding to the identifiers passed in the body
   * @summary Get a batch of document
   * @param body
   */
  async getDocuments(body?: ListOfIds): Promise<Array<Document>> {
    let _body = null
    _body = body

    const _url = this.host + `/document/byIds` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of document corresponding to the externalUuid passed in the request
   * @summary Get all documents with externalUuid
   * @param externalUuid
   */
  async getDocumentsByExternalUuid(externalUuid: string): Promise<Array<Document>> {
    let _body = null

    const _url = this.host + `/document/externaluuid/${encodeURIComponent(String(externalUuid))}/all` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Updates the document and returns an instance of the modified document afterward
   * @summary Update a document
   * @param body
   */
  async modifyDocument(body?: Document): Promise<Document> {
    let _body = null
    _body = body

    const _url = this.host + `/document` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the modified documents.
   * @summary Update a batch of documents
   * @param body
   */
  async modifyDocuments(body?: Array<Document>): Promise<Array<Document>> {
    let _body = null
    _body = body

    const _url = this.host + `/document/batch` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Creates or updates a main attachment for a document and returns the modified document instance afterward
   * @param documentId id of the document
   * @param documentRev revision of the document
   * @param body content of the attachment (must be compatible with XHR body)
   * @param utis an array of UTIs for the attachment. The first element will be considered as the main UTI for the document. If provided and non-empty
   * overrides existing values.
   */
  async setMainDocumentAttachment(documentId: string, documentRev: string, body: Object, utis?: Array<string>): Promise<Document> {
    if (!documentRev) throw new Error('Document rev is required')
    let _body = body

    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/attachment` +
      '?ts=' +
      new Date().getTime() +
      '&rev=' +
      encodeURIComponent(String(documentRev)) +
      (utis ? utis.map((x) => '&utis=' + encodeURIComponent(String(x))).join('') : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/octet-stream'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @deprecated use setMainDocumentAttachment instead
   */
  setDocumentAttachmentBody(documentId: string, documentRev: string, enckeys?: null, body?: Object, utis?: string[]): Promise<Document> {
    if (enckeys) {
      throw new Error('Server-side encryption of attachment is not allowed anymore')
    }
    if (!body) {
      throw new Error('body is now required.')
    }
    return this.setMainDocumentAttachment(documentId, documentRev, body, utis)
  }

  /**
   * @deprecated use setMainDocumentAttachment instead
   */
  setDocumentAttachment(documentId: string, documentRev: string, enckeys?: null, body?: Object, utis?: string[]): Promise<Document> {
    if (enckeys) {
      throw new Error('Server-side encryption of attachment is not allowed anymore')
    }
    if (!body) {
      throw new Error('body is now required.')
    }
    return this.setMainDocumentAttachment(documentId, documentRev, body, utis)
  }

  /**
   * @deprecated use setMainDocumentAttachment instead
   */
  setDocumentAttachmentMulti(attachment: ArrayBuffer, documentRev: string, documentId: string, enckeys?: null): Promise<Document> {
    if (enckeys) {
      throw new Error('Server-side encryption of attachment is not allowed anymore')
    }
    return this.setMainDocumentAttachment(documentId, documentRev, attachment)
  }

  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  async setDocumentsDelegations(body?: Array<IcureStub>): Promise<Array<IcureStub>> {
    let _body = null
    _body = body

    const _url = this.host + `/document/delegations` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IcureStub(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Creates or updates a secondary attachment for a document and returns the modified document instance afterward
   * @summary Creates or modifies a secondary attachment for a document
   * @param documentId id of the document to update
   * @param key Key of the secondary attachment to update
   * @param rev Revision of the latest known version of the document. If the revision does not match the current version of the document the method
   * will fail with CONFLICT status
   * @param attachment
   * @param utis an array of UTIs for the attachment. If provided and non-empty overrides existing values.
   * @return the updated document
   */
  async setSecondaryAttachment(documentId: string, key: string, rev: string, attachment: Object, utis?: Array<string>): Promise<Document> {
    const _url =
      this.host +
      `/document/` +
      encodeURIComponent(String(documentId)) +
      '/secondaryAttachments/' +
      encodeURIComponent(String(key)) +
      '?ts=' +
      new Date().getTime() +
      (rev ? '&rev=' + encodeURIComponent(String(rev)) : '') +
      (utis ? utis.map((x) => '&utis=' + encodeURIComponent(String(x))).join('') : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/octet-stream'))
    return XHR.sendCommand('PUT', _url, headers, attachment, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Get the secondary attachment with the provided key for a document
   * @summary Retrieve a secondary attachment of a document
   * @param documentId id of the document
   * @param key Key of the secondary attachment to retrieve
   * @param fileName
   * @return the content of the attachment
   */
  async getSecondaryAttachment(documentId: string, key: string, fileName?: string): Promise<ArrayBuffer> {
    let _body = null

    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/secondaryAttachments/${encodeURIComponent(String(key))}` +
      '?ts=' +
      new Date().getTime() +
      (fileName ? '&fileName=' + encodeURIComponent(String(fileName)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => doc.body)
      .catch((err) => this.handleError(err))
  }

  /**
   * Deletes a document's attachment and returns the modified document instance afterward
   * @summary Delete a document's attachment
   * @param documentId id of the document
   * @param key Key of the secondary attachment to delete
   * @param rev Revision of the latest known version of the document. If the revision does not match the current version of the document the method will fail with CONFLICT status
   * @return the updated document
   */
  async deleteSecondaryAttachment(documentId: string, key: string, rev: string): Promise<Document> {
    let _body = null

    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/secondaryAttachments/${encodeURIComponent(String(key))}` +
      '?ts=' +
      new Date().getTime() +
      (rev ? '&rev=' + encodeURIComponent(String(rev)) : '')
    let headers = await this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Document(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  // TODO single request multi-attachment update

  /**
   * @internal this method is for internal use only and may be changed without notice
   */
  async bulkShareDocument(request: BulkShareOrUpdateMetadataParams): Promise<EntityBulkShareResult<Document>[]> {
    const _url = this.host + '/document/bulkSharedMetadataUpdate' + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, request, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((x) => new EntityBulkShareResult<Document>(x, Document)))
      .catch((err) => this.handleError(err))
  }
}
