/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { ContactDto } from "../model/ContactDto"
import { DocumentDto } from "../model/DocumentDto"
import { FormDto } from "../model/FormDto"
import { HealthElementDto } from "../model/HealthElementDto"
import { IndexingInfoDto } from "../model/IndexingInfoDto"
import { InvoiceDto } from "../model/InvoiceDto"
import { MessageDto } from "../model/MessageDto"
import { PatientDto } from "../model/PatientDto"
import { ReplicationInfoDto } from "../model/ReplicationInfoDto"
import { ReplicatorDocument } from "../model/ReplicatorDocument"

export class iccIcureApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Get index info
   */
  getIndexingInfo(): Promise<IndexingInfoDto> {
    let _body = null

    const _url = this.host + `/icure/i` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => new IndexingInfoDto(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get process info
   */
  getProcessInfo(): Promise<string> {
    let _body = null

    const _url = this.host + `/icure/p` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get replication info
   */
  getReplicationInfo(): Promise<ReplicationInfoDto> {
    let _body = null

    const _url = this.host + `/icure/r` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => new ReplicationInfoDto(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get replication info
   * @param id
   */
  getReplicatorInfo(id: string): Promise<ReplicatorDocument> {
    let _body = null

    const _url =
      this.host + `/icure/r/${encodeURIComponent(String(id))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => new ReplicatorDocument(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get version
   */
  getVersion(): Promise<string> {
    let _body = null

    const _url = this.host + `/icure/v` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Check if a user exists
   */
  isReady(): Promise<string> {
    let _body = null

    const _url = this.host + `/icure/ok` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Resolve contacts conflicts
   * @param limit
   */
  resolveContactsConflicts(limit?: number): Promise<Array<ContactDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/contact` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new ContactDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve documents conflicts
   * @param ids
   * @param limit
   */
  resolveDocumentsConflicts(ids?: string, limit?: number): Promise<Array<DocumentDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/document` +
      "?ts=" +
      new Date().getTime() +
      (ids ? "&ids=" + encodeURIComponent(String(ids)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocumentDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve forms conflicts
   * @param limit
   */
  resolveFormsConflicts(limit?: number): Promise<Array<FormDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/form` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new FormDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve healthcare elements conflicts
   * @param limit
   */
  resolveHealthElementsConflicts(limit?: number): Promise<Array<HealthElementDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/healthelement` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new HealthElementDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve invoices conflicts
   * @param limit
   */
  resolveInvoicesConflicts(limit?: number): Promise<Array<InvoiceDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/invoice` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new InvoiceDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve messages conflicts
   * @param limit
   */
  resolveMessagesConflicts(limit?: number): Promise<Array<MessageDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/message` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new MessageDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Resolve patients conflicts
   * @param limit
   */
  resolvePatientsConflicts(limit?: number): Promise<Array<PatientDto>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/patient` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new PatientDto(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Force update design doc
   * @param entityName
   * @param warmup
   */
  updateDesignDoc(entityName: string, warmup?: boolean): Promise<boolean> {
    let _body = null

    const _url =
      this.host +
      `/icure/dd/${encodeURIComponent(String(entityName))}` +
      "?ts=" +
      new Date().getTime() +
      (warmup ? "&warmup=" + encodeURIComponent(String(warmup)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }
}
