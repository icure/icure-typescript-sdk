/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class iccBeehboxApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  deleteMessages(token: string, from: string, body?: models.ListOfIdsDto): Promise<any | Boolean> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_ehbox/delete/{token}/{from}"
        .replace("{token}", token + "")
        .replace("{from}", from + "") +
      "?ts=" +
      new Date().getTime()

    return XHR.sendCommand("PUT", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
  }
  getEmptyMessage(): Promise<models.DocumentEhealthMessage | any> {
    let _body = null

    const _url = this.host + "/be_ehbox/template" + "?ts=" + new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => new models.DocumentEhealthMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getFullMessage(
    token: string,
    source: string,
    messageId: string
  ): Promise<models.DocumentEhealthMessage | any> {
    let _body = null

    const _url =
      this.host +
      "/be_ehbox/message/{token}/{source}/{messageId}"
        .replace("{token}", token + "")
        .replace("{source}", source + "")
        .replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => new models.DocumentEhealthMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getIdentifierTypes(): Promise<Array<models.IdentifierType> | any> {
    let _body = null

    const _url = this.host + "/be_ehbox/identifiers" + "?ts=" + new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.IdentifierType(it)))
      .catch(err => this.handleError(err))
  }
  getInfos(token: string): Promise<models.BoxInfo | any> {
    let _body = null

    const _url =
      this.host + "/be_ehbox/{token}".replace("{token}", token + "") + "?ts=" + new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => new models.BoxInfo(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getMessagesList(token: string, boxId: string): Promise<Array<models.EhealthMessage> | any> {
    let _body = null

    const _url =
      this.host +
      "/be_ehbox/messages/{token}/{boxId}"
        .replace("{token}", token + "")
        .replace("{boxId}", boxId + "") +
      "?ts=" +
      new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.EhealthMessage(it)))
      .catch(err => this.handleError(err))
  }
  getQualityTypes(): Promise<Array<models.QualityType> | any> {
    let _body = null

    const _url = this.host + "/be_ehbox/qualities" + "?ts=" + new Date().getTime()

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.QualityType(it)))
      .catch(err => this.handleError(err))
  }
  moveMessages(
    token: string,
    from: string,
    to: string,
    body?: models.ListOfIdsDto
  ): Promise<boolean | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_ehbox/move/{token}/{from}/{to}"
        .replace("{token}", token + "")
        .replace("{from}", from + "")
        .replace("{to}", to + "") +
      "?ts=" +
      new Date().getTime()

    return XHR.sendCommand("PUT", _url, this.headers, _body)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  refreshMessages(
    token: string,
    boxId: string,
    limit?: number
  ): Promise<Array<models.MessageDto> | any> {
    let _body = null

    const _url =
      this.host +
      "/be_ehbox/refresh/{token}/{boxId}"
        .replace("{token}", token + "")
        .replace("{boxId}", boxId + "") +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + limit : "")

    return XHR.sendCommand("PUT", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
  sendMessage(
    token: string,
    notificationMask: number,
    body?: models.DocumentEhealthMessage
  ): Promise<boolean | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_ehbox/send/{token}/{notificationMask}"
        .replace("{token}", token + "")
        .replace("{notificationMask}", notificationMask + "") +
      "?ts=" +
      new Date().getTime()

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
}
