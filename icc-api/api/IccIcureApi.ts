/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { Contact } from '../model/Contact'
import { Document } from '../model/Document'
import { Form } from '../model/Form'
import { HealthElement } from '../model/HealthElement'
import { IndexingInfo } from '../model/IndexingInfo'
import { Invoice } from '../model/Invoice'
import { Message } from '../model/Message'
import { Patient } from '../model/Patient'
import { ReplicationInfo } from '../model/ReplicationInfo'
import { ReplicatorDocument } from '../model/ReplicatorDocument'

export class IccIcureApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Get index info
   */
  getIndexingInfo(): Promise<IndexingInfo> {
    let _body = null

    const _url = this.host + `/icure/i` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => new IndexingInfo(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get process info
   */
  getProcessInfo(): Promise<string> {
    let _body = null

    const _url = this.host + `/icure/p` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get replication info
   */
  getReplicationInfo(): Promise<ReplicationInfo> {
    let _body = null

    const _url = this.host + `/icure/r` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => new ReplicationInfo(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get replication info
   * @param id
   */
  getReplicatorInfo(id: string): Promise<ReplicatorDocument> {
    let _body = null

    const _url = this.host + `/icure/r/${encodeURIComponent(String(id))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => new ReplicatorDocument(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get version
   */
  getVersion(): Promise<string> {
    let _body = null

    const _url = this.host + `/icure/v` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @param loglevel
   * @param _package
   */
  loglevel(loglevel: string, _package: string): Promise<string> {
    let _body = null

    const _url =
      this.host +
      `/icure/loglevel/${encodeURIComponent(String(loglevel))}` +
      '?ts=' +
      new Date().getTime() +
      (_package ? '&_package=' + encodeURIComponent(String(_package)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Resolve contacts conflicts
   * @param limit
   */
  resolveContactsConflicts(limit?: number): Promise<Array<Contact>> {
    let _body = null

    const _url = this.host + `/icure/conflicts/contact` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Contact(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve documents conflicts
   * @param ids
   * @param limit
   */
  resolveDocumentsConflicts(ids?: string, limit?: number): Promise<Array<Document>> {
    let _body = null

    const _url =
      this.host +
      `/icure/conflicts/document` +
      '?ts=' +
      new Date().getTime() +
      (ids ? '&ids=' + encodeURIComponent(String(ids)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Document(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve forms conflicts
   * @param limit
   */
  resolveFormsConflicts(limit?: number): Promise<Array<Form>> {
    let _body = null

    const _url = this.host + `/icure/conflicts/form` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Form(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve healthcare elements conflicts
   * @param limit
   */
  resolveHealthElementsConflicts(limit?: number): Promise<Array<HealthElement>> {
    let _body = null

    const _url =
      this.host + `/icure/conflicts/healthelement` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new HealthElement(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve invoices conflicts
   * @param limit
   */
  resolveInvoicesConflicts(limit?: number): Promise<Array<Invoice>> {
    let _body = null

    const _url = this.host + `/icure/conflicts/invoice` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary resolve messages conflicts
   * @param limit
   */
  resolveMessagesConflicts(limit?: number): Promise<Array<Message>> {
    let _body = null

    const _url = this.host + `/icure/conflicts/message` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Resolve patients conflicts
   * @param limit
   */
  resolvePatientsConflicts(limit?: number): Promise<Array<Patient>> {
    let _body = null

    const _url = this.host + `/icure/conflicts/patient` + '?ts=' + new Date().getTime() + (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Patient(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Force update design doc
   * @param entityName
   * @param warmup
   */
  updateDesignDoc(entityName: string, warmup?: boolean): Promise<boolean> {
    let _body = null

    const _url =
      this.host +
      `/icure/dd/${encodeURIComponent(String(entityName))}` +
      '?ts=' +
      new Date().getTime() +
      (warmup ? '&warmup=' + encodeURIComponent(String(warmup)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }
}
