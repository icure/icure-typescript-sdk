/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { ClassificationTemplate } from '../model/ClassificationTemplate'
import { Delegation } from '../model/Delegation'
import { DocIdentifier } from '../model/DocIdentifier'
import { PaginatedListClassificationTemplate } from '../model/PaginatedListClassificationTemplate'
import { AuthenticationProvider, NoAuthenticationProvider } from '../../icc-x-api/auth/AuthenticationProvider'
import { iccRestApiPath } from './IccRestApiPath'
import { ListOfIds } from '../model/ListOfIds'

export class IccClassificationTemplateApi {
  host: string
  headers: Array<XHR.Header>
  authenticationProvider: AuthenticationProvider
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    authenticationProvider?: AuthenticationProvider,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = iccRestApiPath(host)
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.authenticationProvider = !!authenticationProvider ? authenticationProvider : new NoAuthenticationProvider()
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   * Returns an instance of created classification Template.
   * @summary Create a classification Template with the current user
   * @param body
   */
  async createClassificationTemplate(body?: ClassificationTemplate): Promise<ClassificationTemplate> {
    let _body = null
    _body = body

    const _url = this.host + `/classificationTemplate` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new ClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a batch of classification templates.
   *
   * @param classificationTemplateIds a ListOfIds containing the ids of the classification templates to delete.
   * @return a Promise that will resolve in an array of DocIdentifiers of the successfully deleted classification templates
   */
  async deleteClassificationTemplates(classificationTemplateIds: ListOfIds): Promise<Array<DocIdentifier>> {
    return XHR.sendCommand(
      'POST',
      this.host + `/classificationTemplate/delete/batch` + '?ts=' + new Date().getTime(),
      this.headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json')),
      classificationTemplateIds,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a single classification template by id.
   *
   * @param classificationTemplateId the id of the classification template to delete.
   * @return a Promise that will resolve in the DocIdentifier of the deleted classification template.
   */
  async deleteClassificationTemplate(classificationTemplateId: string): Promise<DocIdentifier> {
    return XHR.sendCommand(
      'DELETE',
      this.host + `/classificationTemplate/${encodeURIComponent(classificationTemplateId)}` + '?ts=' + new Date().getTime(),
      this.headers,
      null,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => new DocIdentifier(doc.body))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys have to be delimited by commas.
   * @summary List classification Templates found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  async findClassificationTemplatesByHCPartyPatientForeignKeys(hcPartyId: string, secretFKeys: string): Promise<Array<ClassificationTemplate>> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate/byHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '') +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new ClassificationTemplate(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary List classification Templates found By Healthcare Party and a single secret foreign key with pagination.
   * @param hcPartyId the healthcare party id.
   * @param secretFKey the secret foreign key.
   * @param startKey the startKey provided by the previous page or undefined for the first page.
   * @param startDocumentId the startDocumentId provided by the previous page or undefined for the first page.
   * @param limit the number of elements that the page should contain.
   * @return a promise that will resolve in a PaginatedListClassificationTemplate.
   */
  async findClassificationTemplatesByHCPartyPatientForeignKey(
    hcPartyId: string,
    secretFKey: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListClassificationTemplate> {
    const _url =
      this.host +
      `/classificationTemplate/byHcPartySecretForeignKey?ts=${new Date().getTime()}` +
      `&hcPartyId=${encodeURIComponent(hcPartyId)}` +
      `&secretFKey=${encodeURIComponent(secretFKey)}` +
      (!!startKey ? `&startKey=${encodeURIComponent(startKey)}` : '') +
      (!!startDocumentId ? `&startDocumentId=${encodeURIComponent(startDocumentId)}` : '') +
      (!!limit ? `&limit=${limit}` : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, null, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get a classification Template
   * @param classificationTemplateId
   */
  async getClassificationTemplate(classificationTemplateId: string): Promise<ClassificationTemplate> {
    let _body = null

    const _url = this.host + `/classificationTemplate/${encodeURIComponent(String(classificationTemplateId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new ClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Ids are seperated by a coma
   * @summary Get a list of classifications Templates
   * @param ids
   */
  async getClassificationTemplateByIds(ids: string): Promise<Array<ClassificationTemplate>> {
    let _body = null

    const _url = this.host + `/classificationTemplate/byIds/${encodeURIComponent(String(ids))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new ClassificationTemplate(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of classification templates.
   * @summary List all classification templates with pagination
   * @param startKey A label
   * @param startDocumentId An classification template document ID
   * @param limit Number of rows
   */
  async listClassificationTemplates(startKey?: string, startDocumentId?: string, limit?: number): Promise<PaginatedListClassificationTemplate> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate` +
      '?ts=' +
      new Date().getTime() +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the modified classification Template.
   * @summary Modify a classification Template
   * @param body
   */
  async modifyClassificationTemplate(body?: ClassificationTemplate): Promise<ClassificationTemplate> {
    const _url = this.host + `/classificationTemplate` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new ClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * It delegates a classification Template to a healthcare party (By current healthcare party). Returns the element with new delegations.
   * @summary Delegates a classification Template to a healthcare party
   * @param body
   * @param classificationTemplateId
   */
  async newClassificationTemplateDelegations(classificationTemplateId: string, body?: Array<Delegation>): Promise<ClassificationTemplate> {
    const _url =
      this.host + `/classificationTemplate/${encodeURIComponent(String(classificationTemplateId))}/delegate` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new ClassificationTemplate(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }
}
