/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { Delegation } from '../model/Delegation'
import { DocIdentifier } from '../model/DocIdentifier'
import { FilterChainInvoice } from '../model/FilterChainInvoice'
import { IcureStub } from '../model/IcureStub'
import { Invoice } from '../model/Invoice'
import { InvoicingCode } from '../model/InvoicingCode'
import { LabelledOccurence } from '../model/LabelledOccurence'
import { ListOfIds } from '../model/ListOfIds'
import { PaginatedListInvoice } from '../model/PaginatedListInvoice'
import { AuthenticationProvider, NoAuthenticationProvider } from '../../icc-x-api/auth/AuthenticationProvider'
import { iccRestApiPath } from './IccRestApiPath'
import { EntityShareOrMetadataUpdateRequest } from '../model/requests/EntityShareOrMetadataUpdateRequest'
import { EntityBulkShareResult } from '../model/requests/EntityBulkShareResult'
import { MinimalEntityBulkShareResult } from '../model/requests/MinimalEntityBulkShareResult'
import { BulkShareOrUpdateMetadataParams } from '../model/requests/BulkShareOrUpdateMetadataParams'

export class IccInvoiceApi {
  host: string
  _headers: Array<XHR.Header>
  authenticationProvider: AuthenticationProvider
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  get headers(): Promise<Array<XHR.Header>> {
    return Promise.resolve(this._headers)
  }

  constructor(
    host: string,
    headers: any,
    authenticationProvider?: AuthenticationProvider,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = iccRestApiPath(host)
    this._headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.authenticationProvider = !!authenticationProvider ? authenticationProvider : new NoAuthenticationProvider()
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this._headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Append codes to new or existing invoice
   * @param body
   * @param userId
   * @param type
   * @param sentMediumType
   * @param secretFKeys
   * @param insuranceId
   * @param invoiceId
   * @param gracePeriod
   */
  async appendCodes(
    userId: string,
    type: string,
    sentMediumType: string,
    secretFKeys: string,
    insuranceId?: string,
    invoiceId?: string,
    gracePeriod?: number,
    body?: Array<InvoicingCode>
  ): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/invoice/byauthor/${encodeURIComponent(String(userId))}/append/${encodeURIComponent(String(type))}/${encodeURIComponent(
        String(sentMediumType)
      )}` +
      '?ts=' +
      new Date().getTime() +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '') +
      (insuranceId ? '&insuranceId=' + encodeURIComponent(String(insuranceId)) : '') +
      (invoiceId ? '&invoiceId=' + encodeURIComponent(String(invoiceId)) : '') +
      (gracePeriod ? '&gracePeriod=' + encodeURIComponent(String(gracePeriod)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Creates an invoice
   * @param body
   */
  async createInvoice(body?: Invoice): Promise<Invoice> {
    const _url = this.host + `/invoice` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the created invoices.
   * @summary Create a batch of invoices
   * @param body
   */
  async createInvoices(body?: Array<Invoice>): Promise<Array<Invoice>> {
    const _url = this.host + `/invoice/batch` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Deletes an invoice
   * @param invoiceId
   */
  async deleteInvoice(invoiceId: string): Promise<DocIdentifier> {
    let _body = null

    const _url = this.host + `/invoice/${encodeURIComponent(String(invoiceId))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new DocIdentifier(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of invoices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter invoices for the current user (HcParty)
   * @param body
   */
  async filterInvoicesBy(body?: FilterChainInvoice): Promise<Array<Invoice>> {
    const _url = this.host + `/invoice/filter` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   * @param fromDate
   * @param toDate
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   */
  async findByAuthor(
    hcPartyId: string,
    fromDate?: number,
    toDate?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListInvoice> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byauthor/${encodeURIComponent(String(hcPartyId))}` +
      '?ts=' +
      new Date().getTime() +
      (fromDate ? '&fromDate=' + encodeURIComponent(String(fromDate)) : '') +
      (toDate ? '&toDate=' + encodeURIComponent(String(toDate)) : '') +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListInvoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys have to delimited by coma
   * @summary List invoices found By Healthcare Party and secret foreign patient keys.
   * @param body
   * @param hcPartyId
   */
  async findInvoicesByHCPartyPatientForeignKeysUsingPost(hcPartyId: string, body?: Array<string>): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/invoice/byHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys have to delimited by commas.
   * @summary List invoices found By Healthcare Party and secret foreign patient keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  async findInvoicesByHCPartyPatientForeignKeys(hcPartyId: string, secretFKeys: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '') +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary List invoices found By Healthcare Party and a single secret foreign patient keys with pagination.
   * @param hcPartyId the healthcare party id.
   * @param secretFKey the secret foreign key.
   * @param startKey the startKey provided by the previous page or undefined for the first page.
   * @param startDocumentId the startDocumentId provided by the previous page or undefined for the first page.
   * @param limit the number of elements that the page should contain.
   * @return a promise that will resolve in a PaginatedListInvoice.
   */
  async findInvoicesByHCPartyPatientForeignKey(
    hcPartyId: string,
    secretFKey: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListInvoice> {
    const _url =
      this.host +
      `/invoice/byHcPartySecretForeignKey?ts=${new Date().getTime()}` +
      '&hcPartyId=' +
      encodeURIComponent(hcPartyId) +
      `&secretFKey=${encodeURIComponent(secretFKey)}` +
      (!!startKey ? `&startKey=${encodeURIComponent(startKey)}` : '') +
      (!!startDocumentId ? `&startDocumentId=${encodeURIComponent(startDocumentId)}` : '') +
      (!!limit ? `&limit=${limit}` : '')
    const headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, null, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListInvoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary List helement stubs found By Healthcare Party and secret foreign keys.
   * @param body
   * @param hcPartyId
   */
  async findInvoicesDelegationsStubsByHCPartyPatientForeignKeysUsingPost(hcPartyId: string, body?: Array<string>): Promise<Array<IcureStub>> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/invoice/byHcPartySecretForeignKeys/delegations` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IcureStub(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by coma
   * @summary List helement stubs found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  async findInvoicesDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId: string, secretFKeys: string): Promise<Array<IcureStub>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byHcPartySecretForeignKeys/delegations` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '') +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IcureStub(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets an invoice
   * @param invoiceId
   */
  async getInvoice(invoiceId: string): Promise<Invoice> {
    let _body = null

    const _url = this.host + `/invoice/${encodeURIComponent(String(invoiceId))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets an invoice
   * @param body
   */
  async getInvoices(body?: ListOfIds): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/byIds` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get the list of all used tarifications frequencies in invoices
   * @param minOccurences
   */
  async getTarificationsCodesOccurences(minOccurences: number): Promise<Array<LabelledOccurence>> {
    let _body = null

    const _url = this.host + `/invoice/codes/${encodeURIComponent(String(minOccurences))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new LabelledOccurence(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices per status
   * @param body
   * @param status
   * @param from
   * @param to
   */
  async listAllHcpsByStatus(status: string, from?: number, to?: number, body?: ListOfIds): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/invoice/allHcpsByStatus/${encodeURIComponent(String(status))}` +
      '?ts=' +
      new Date().getTime() +
      (from ? '&from=' + encodeURIComponent(String(from)) : '') +
      (to ? '&to=' + encodeURIComponent(String(to)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   */
  async listByContactIds(body?: ListOfIds): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/byCtcts` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys have to delimited by coma
   * @summary List invoices by groupId
   * @param hcPartyId
   * @param groupId
   */
  async listByHcPartyGroupId(hcPartyId: string, groupId: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byHcPartyGroupId/${encodeURIComponent(String(hcPartyId))}/${encodeURIComponent(String(groupId))}` +
      '?ts=' +
      new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys have to delimited by coma
   * @summary List invoices by type, sent or unsent
   * @param hcPartyId
   * @param sentMediumType
   * @param invoiceType
   * @param sent
   * @param from
   * @param to
   */
  async listByHcPartySentMediumTypeInvoiceTypeSentDate(
    hcPartyId: string,
    sentMediumType: string,
    invoiceType: string,
    sent: boolean,
    from?: number,
    to?: number
  ): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byHcParty/${encodeURIComponent(String(hcPartyId))}/mediumType/${encodeURIComponent(
        String(sentMediumType)
      )}/invoiceType/${encodeURIComponent(String(invoiceType))}/sent/${encodeURIComponent(String(sent))}` +
      '?ts=' +
      new Date().getTime() +
      (from ? '&from=' + encodeURIComponent(String(from)) : '') +
      (to ? '&to=' + encodeURIComponent(String(to)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all invoices by author, by sending mode, by status and by date
   * @param hcPartyId
   * @param sendingMode
   * @param status
   * @param from
   * @param to
   */
  async listByHcpartySendingModeStatusDate(
    hcPartyId: string,
    sendingMode?: string,
    status?: string,
    from?: number,
    to?: number
  ): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/byHcpartySendingModeStatusDate/${encodeURIComponent(String(hcPartyId))}` +
      '?ts=' +
      new Date().getTime() +
      (sendingMode ? '&sendingMode=' + encodeURIComponent(String(sendingMode)) : '') +
      (status ? '&status=' + encodeURIComponent(String(status)) : '') +
      (from ? '&from=' + encodeURIComponent(String(from)) : '') +
      (to ? '&to=' + encodeURIComponent(String(to)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param invoiceIds
   */
  async listByIds(invoiceIds: string): Promise<Array<Invoice>> {
    let _body = null

    const _url = this.host + `/invoice/byIds/${encodeURIComponent(String(invoiceIds))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param recipientIds
   */
  async listByRecipientsIds(recipientIds: string): Promise<Array<Invoice>> {
    let _body = null

    const _url = this.host + `/invoice/to/${encodeURIComponent(String(recipientIds))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param serviceIds
   */
  async listByServiceIds(serviceIds: string): Promise<Array<Invoice>> {
    let _body = null

    const _url = this.host + `/invoice/byServiceIds/${encodeURIComponent(String(serviceIds))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param userIds
   */
  async listToInsurances(userIds?: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host + `/invoice/toInsurances` + '?ts=' + new Date().getTime() + (userIds ? '&userIds=' + encodeURIComponent(String(userIds)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param userIds
   */
  async listToInsurancesUnsent(userIds?: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host + `/invoice/toInsurances/unsent` + '?ts=' + new Date().getTime() + (userIds ? '&userIds=' + encodeURIComponent(String(userIds)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   */
  async listToPatients(hcPartyId?: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host + `/invoice/toPatients` + '?ts=' + new Date().getTime() + (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   */
  async listToPatientsUnsent(hcPartyId?: string): Promise<Array<Invoice>> {
    let _body = null

    const _url =
      this.host +
      `/invoice/toPatients/unsent` +
      '?ts=' +
      new Date().getTime() +
      (hcPartyId ? '&hcPartyId=' + encodeURIComponent(String(hcPartyId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   * @param invoiceId
   */
  async mergeTo(invoiceId: string, body?: ListOfIds): Promise<Invoice> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/mergeTo/${encodeURIComponent(String(invoiceId))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Modifies an invoice
   * @param body
   */
  async modifyInvoice(body?: Invoice): Promise<Invoice> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns the modified invoices.
   * @summary Modify a batch of invoices
   * @param body
   */
  async modifyInvoices(body?: Array<Invoice>): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/batch` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Adds a delegation to a invoice
   * @param body
   * @param invoiceId
   */
  async newInvoiceDelegations(invoiceId: string, body?: Array<Delegation>): Promise<Invoice> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/${encodeURIComponent(String(invoiceId))}/delegate` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Modifies an invoice
   * @param body
   */
  async reassignInvoice(body?: Invoice): Promise<Invoice> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/reassign` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary removeCodes for linked serviceId
   * @param body
   * @param userId
   * @param serviceId
   * @param secretFKeys
   */
  async removeCodes(userId: string, serviceId: string, secretFKeys: string, body?: Array<string>): Promise<Array<Invoice>> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/invoice/byauthor/${encodeURIComponent(String(userId))}/service/${encodeURIComponent(String(serviceId))}` +
      '?ts=' +
      new Date().getTime() +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Invoice(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  async setInvoicesDelegations(body?: Array<IcureStub>): Promise<Array<IcureStub>> {
    let _body = null
    _body = body

    const _url = this.host + `/invoice/delegations` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new IcureStub(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all invoices for author at date
   * @param invoiceId
   * @param scheme
   * @param forcedValue
   */
  async validate(invoiceId: string, scheme: string, forcedValue: string): Promise<Invoice> {
    let _body = null

    const _url =
      this.host +
      `/invoice/validate/${encodeURIComponent(String(invoiceId))}` +
      '?ts=' +
      new Date().getTime() +
      (scheme ? '&scheme=' + encodeURIComponent(String(scheme)) : '') +
      (forcedValue ? '&forcedValue=' + encodeURIComponent(String(forcedValue)) : '')
    let headers = await this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Invoice(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @internal this method is for internal use only and may be changed without notice
   */
  async bulkShareInvoices(request: BulkShareOrUpdateMetadataParams): Promise<EntityBulkShareResult<Invoice>[]> {
    const _url = this.host + '/invoice/bulkSharedMetadataUpdate' + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, request, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((x) => new EntityBulkShareResult<Invoice>(x, Invoice)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @internal this method is for internal use only and may be changed without notice
   */
  async bulkShareInvoicesMinimal(request: BulkShareOrUpdateMetadataParams): Promise<MinimalEntityBulkShareResult[]> {
    const _url = this.host + '/invoice/bulkSharedMetadataUpdateMinimal' + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, request, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((x) => new MinimalEntityBulkShareResult(x)))
      .catch((err) => this.handleError(err))
  }
}
