/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DatabaseInitialisationDto } from "../model/DatabaseInitialisationDto"
import { GroupDto } from "../model/GroupDto"

export class iccGroupApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  /**
   * Create a new gorup with associated dbs
   * @summary Create a group
   * @param body
   * @param id
   * @param name
   * @param password
   * @param server
   * @param q
   * @param n
   */
  createGroup(
    id: string,
    name: string,
    password: string,
    server?: string,
    q?: number,
    n?: number,
    body?: DatabaseInitialisationDto
  ): Promise<GroupDto | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/group/${encodeURIComponent(String(id))}".replace("{id}", id + "") +
      "?ts=" +
      new Date().getTime() +
      (name ? "&name=" + name : "") +
      (password ? "&password=" + password : "") +
      (server ? "&server=" + server : "") +
      (q ? "&q=" + q : "") +
      (n ? "&n=" + n : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new GroupDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Create a new gorup with associated dbs
   * @summary List groups
   */
  listGroups(): Promise<Array<GroupDto> | any> {
    let _body = null

    const _url = this.host + "/group" + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new GroupDto(it)))
      .catch(err => this.handleError(err))
  }
}
