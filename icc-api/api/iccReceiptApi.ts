/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DocIdentifier } from "../model/DocIdentifier"
import { ReceiptDto } from "../model/ReceiptDto"

export class iccReceiptApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  /**
   *
   * @summary Creates a receipt
   * @param body
   */
  createReceipt(body?: ReceiptDto): Promise<ReceiptDto | any> {
    let _body = null
    _body = body

    const _url = this.host + "/receipt" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new ReceiptDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Deletes a receipt
   * @param receiptIds
   */
  deleteReceipt(receiptIds: string): Promise<Array<DocIdentifier> | any> {
    let _body = null

    const _url =
      this.host +
      "/receipt/${encodeURIComponent(String(receiptIds))}".replace(
        "{receiptIds}",
        receiptIds + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Gets a receipt
   * @param receiptId
   */
  getReceipt(receiptId: string): Promise<ReceiptDto | any> {
    let _body = null

    const _url =
      this.host +
      "/receipt/${encodeURIComponent(String(receiptId))}".replace("{receiptId}", receiptId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new ReceiptDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Get an attachment
   * @param receiptId
   * @param attachmentId
   * @param enckeys
   */
  getReceiptAttachment(
    receiptId: string,
    attachmentId: string,
    enckeys: string
  ): Promise<Array<string> | any> {
    let _body = null

    const _url =
      this.host +
      "/receipt/${encodeURIComponent(String(receiptId))}/attachment/${encodeURIComponent(String(attachmentId))}"
        .replace("{receiptId}", receiptId + "")
        .replace("{attachmentId}", attachmentId + "") +
      "?ts=" +
      new Date().getTime() +
      (enckeys ? "&enckeys=" + enckeys : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Gets a receipt
   * @param ref
   */
  listByReference(ref: string): Promise<Array<ReceiptDto> | any> {
    let _body = null

    const _url =
      this.host +
      "/receipt/byref/${encodeURIComponent(String(ref))}".replace("{ref}", ref + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new ReceiptDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Updates a receipt
   * @param body
   */
  modifyReceipt(body?: ReceiptDto): Promise<ReceiptDto | any> {
    let _body = null
    _body = body

    const _url = this.host + "/receipt" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new ReceiptDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Creates a receipt's attachment
   * @param body
   * @param receiptId
   * @param blobType
   * @param enckeys
   */
  setReceiptAttachment(
    receiptId: string,
    blobType: string,
    enckeys?: string,
    body?: Array<string>
  ): Promise<ReceiptDto | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/receipt/${encodeURIComponent(String(receiptId))}/attachment/${encodeURIComponent(String(blobType))}"
        .replace("{receiptId}", receiptId + "")
        .replace("{blobType}", blobType + "") +
      "?ts=" +
      new Date().getTime() +
      (enckeys ? "&enckeys=" + enckeys : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new ReceiptDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
