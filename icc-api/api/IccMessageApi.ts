/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { Delegation } from '../model/Delegation'
import { DocIdentifier } from '../model/DocIdentifier'
import { IcureStub } from '../model/IcureStub'
import { ListOfIds } from '../model/ListOfIds'
import { Message } from '../model/Message'
import { MessagesReadStatusUpdate } from '../model/MessagesReadStatusUpdate'
import { PaginatedListMessage } from '../model/PaginatedListMessage'
import { AuthenticationProvider, NoAuthenticationProvider } from '../../icc-x-api/auth/AuthenticationProvider'
import { iccRestApiPath } from './IccRestApiPath'
import { EntityShareOrMetadataUpdateRequest } from '../model/requests/EntityShareOrMetadataUpdateRequest'
import { EntityBulkShareResult } from '../model/requests/EntityBulkShareResult'
import { FilterChainMessage } from '../model/FilterChainMessage'
import { AbstractFilterMessage } from '../model/AbstractFilterMessage'
import { BulkShareOrUpdateMetadataParams } from '../model/requests/BulkShareOrUpdateMetadataParams'
import { AccessLog } from '../model/AccessLog'

export class IccMessageApi {
  host: string
  _headers: Array<XHR.Header>
  authenticationProvider: AuthenticationProvider
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  get headers(): Promise<Array<XHR.Header>> {
    return Promise.resolve(this._headers)
  }

  constructor(
    host: string,
    headers: any,
    authenticationProvider?: AuthenticationProvider,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = iccRestApiPath(host)
    this._headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.authenticationProvider = !!authenticationProvider ? authenticationProvider : new NoAuthenticationProvider()
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this._headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   * @summary Creates a message
   * @param body
   */
  async createMessage(body?: Message): Promise<Message> {
    const _url = this.host + `/message` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Message(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Creates a message
   * @param body
   */
  async createMessageInTopic(body?: Message): Promise<Message> {
    const _url = this.host + `/message/topic` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Message(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Deletes a message delegation
   * @param messageId
   * @param delegateId
   */
  async deleteDelegation(messageId: string, delegateId: string): Promise<Message> {
    let _body = null

    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageId))}/delegate/${encodeURIComponent(String(delegateId))}` +
      '?ts=' +
      new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('DELETE', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Message(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a batch of messages.
   *
   * @param messageIds a ListOfIds containing the ids of the messages to delete.
   * @return a Promise that will resolve in an array of DocIdentifiers of the messages successfully deleted
   */
  async deleteMessages(messageIds: ListOfIds): Promise<Array<DocIdentifier>> {
    const headers = (await this.headers).filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand(
      'POST',
      this.host + `/message/delete/batch` + '?ts=' + new Date().getTime(),
      headers,
      messageIds,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => (doc.body as Array<JSON>).map((it) => new DocIdentifier(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Deletes a single message by id.
   *
   * @param messageId the id of the message to delete.
   * @return a Promise that will resolve in the DocIdentifier of the deleted message.
   */
  async deleteMessage(messageId: string): Promise<DocIdentifier> {
    return XHR.sendCommand(
      'DELETE',
      this.host + `/message/${encodeURIComponent(messageId)}` + '?ts=' + new Date().getTime(),
      await this.headers,
      null,
      this.fetchImpl,
      undefined,
      this.authenticationProvider.getAuthService()
    )
      .then((doc) => new DocIdentifier(doc.body))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages (paginated) for current HC Party
   * @param startKey
   * @param startDocumentId
   * @param limit
   */
  async findMessages(startKey?: string, startDocumentId?: string, limit?: number): Promise<PaginatedListMessage> {
    let _body = null

    const _url =
      this.host +
      `/message` +
      '?ts=' +
      new Date().getTime() +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided from address
   * @param fromAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  async findMessagesByFromAddress(
    fromAddress?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage> {
    let _body = null

    const _url =
      this.host +
      `/message/byFromAddress` +
      '?ts=' +
      new Date().getTime() +
      (fromAddress ? '&fromAddress=' + encodeURIComponent(String(fromAddress)) : '') +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '') +
      (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary List messages found By Healthcare Party and secret foreign keys.
   * @param body
   */
  async findMessagesByHCPartyPatientForeignKeysUsingPost(body?: Array<string>): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url = this.host + `/message/byHcPartySecretForeignKeys` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Keys must be delimited by commas.
   * @summary List messages found By Healthcare Party and secret foreign keys.
   * @param secretFKeys
   */
  async findMessagesByHCPartyPatientForeignKeys(secretFKeys: string): Promise<Array<Message>> {
    let _body = null

    const _url =
      this.host +
      `/message/byHcPartySecretForeignKeys` +
      '?ts=' +
      new Date().getTime() +
      (secretFKeys ? '&secretFKeys=' + encodeURIComponent(String(secretFKeys)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary List Message ids by data owner and a set of secret foreign key. The ids will be sorted by Message sent, in ascending or descending
   * order according to the specified parameter value.
   *
   * @param dataOwnerId the data owner id.
   * @param secretFKeys an array of secret foreign keys.
   * @param startDate a timestamp in epoch milliseconds. If undefined, all the message ids since the beginning of time will be returned.
   * @param endDate a timestamp in epoch milliseconds. If undefined, all the message ids until the end of time will be returned.
   * @param descending whether to return the ids ordered in ascending or descending order by Message sent.
   * @return a promise that will resolve in an Array of Message ids.
   */
  async listMessageIdsByDataOwnerPatientSentDate(
    dataOwnerId: string,
    secretFKeys: string[],
    startDate?: number,
    endDate?: number,
    descending?: boolean
  ): Promise<string[]> {
    const _url =
      this.host +
      `/message/byDataOwnerPatientSentDate?ts=${new Date().getTime()}` +
      '&dataOwnerId=' +
      encodeURIComponent(dataOwnerId) +
      (!!startDate ? `&startDate=${encodeURIComponent(startDate)}` : '') +
      (!!endDate ? `&endDate=${encodeURIComponent(endDate)}` : '') +
      (!!descending ? `&descending=${descending}` : '')
    const headers = (await this.headers).filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    const body = new ListOfIds({ ids: secretFKeys })
    return XHR.sendCommand('POST', _url, headers, null, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => JSON.parse(JSON.stringify(it))))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided to address
   * @param toAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param reverse
   * @param hcpId
   */
  async findMessagesByToAddress(
    toAddress?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    reverse?: boolean,
    hcpId?: string
  ): Promise<PaginatedListMessage> {
    let _body = null

    const _url =
      this.host +
      `/message/byToAddress` +
      '?ts=' +
      new Date().getTime() +
      (toAddress ? '&toAddress=' + encodeURIComponent(String(toAddress)) : '') +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '') +
      (reverse ? '&reverse=' + encodeURIComponent(String(reverse)) : '') +
      (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided transportGuid
   * @param transportGuid
   * @param received
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  async findMessagesByTransportGuid(
    transportGuid?: string,
    received?: boolean,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage> {
    let _body = null

    const _url =
      this.host +
      `/message/byTransportGuid` +
      '?ts=' +
      new Date().getTime() +
      (transportGuid ? '&transportGuid=' + encodeURIComponent(String(transportGuid)) : '') +
      (received ? '&received=' + encodeURIComponent(String(received)) : '') +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '') +
      (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages starting by a prefix between two date
   * @param transportGuid
   * @param from
   * @param to
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  async findMessagesByTransportGuidSentDate(
    transportGuid?: string,
    from?: number,
    to?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage> {
    let _body = null

    const _url =
      this.host +
      `/message/byTransportGuidSentDate` +
      '?ts=' +
      new Date().getTime() +
      (transportGuid ? '&transportGuid=' + encodeURIComponent(String(transportGuid)) : '') +
      (from ? '&from=' + encodeURIComponent(String(from)) : '') +
      (to ? '&to=' + encodeURIComponent(String(to)) : '') +
      (startKey ? '&startKey=' + encodeURIComponent(String(startKey)) : '') +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '') +
      (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '')
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get children messages of provided message
   * @param messageId
   */
  async getChildrenMessages(messageId: string): Promise<Array<Message>> {
    let _body = null

    const _url = this.host + `/message/${encodeURIComponent(String(messageId))}/children` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  async getChildrenMessagesOfList(body?: ListOfIds): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url = this.host + `/message/children/batch` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Gets a message
   * @param messageId
   */
  async getMessage(messageId: string): Promise<Message> {
    let _body = null

    const _url = this.host + `/message/${encodeURIComponent(String(messageId))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Message(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   * @summary Gets batch of messages by their ids.
   * @param messageIds the ids of the messages
   */
  async getMessages(messageIds: ListOfIds): Promise<Message[]> {
    const _url = this.host + `/message/byIds` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('GET', _url, headers, messageIds, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  async listMessagesByInvoiceIds(body?: ListOfIds): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url = this.host + `/message/byInvoiceId` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get all messages for current HC Party and provided transportGuids
   * @param body
   * @param hcpId
   */
  async listMessagesByTransportGuids(hcpId: string, body?: ListOfIds): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url =
      this.host + `/message/byTransportGuid/list` + '?ts=' + new Date().getTime() + (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Updates a message
   * @param body
   */
  async modifyMessage(body?: Message): Promise<Message> {
    let _body = null
    _body = body

    const _url = this.host + `/message` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new Message(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Adds a delegation to a message
   * @param body
   * @param messageId
   */
  async newMessageDelegations(messageId: string, body?: Array<Delegation>): Promise<IcureStub> {
    let _body = null
    _body = body

    const _url = this.host + `/message/${encodeURIComponent(String(messageId))}/delegate` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new IcureStub(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Set read status for given list of messages
   * @param body
   */
  async setMessagesReadStatus(body?: MessagesReadStatusUpdate): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url = this.host + `/message/readstatus` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Set status bits for given list of messages
   * @param body
   * @param status
   */
  async setMessagesStatusBits(status: number, body?: ListOfIds): Promise<Array<Message>> {
    let _body = null
    _body = body

    const _url = this.host + `/message/status/${encodeURIComponent(String(status))}` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => new Message(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * @internal this method is for internal use only and may be changed without notice
   */
  async bulkShareMessages(request: BulkShareOrUpdateMetadataParams): Promise<EntityBulkShareResult<Message>[]> {
    const _url = this.host + '/message/bulkSharedMetadataUpdate' + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, request, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((x) => new EntityBulkShareResult<Message>(x, Message)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of messages along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary List messages for the current user (HcParty) or the given hcparty in the filter
   * @param body
   * @param startDocumentId A Message document ID
   * @param limit Number of rows
   */
  async filterMessagesBy(body: FilterChainMessage, startDocumentId?: string, limit?: number): Promise<PaginatedListMessage> {
    const _url =
      this.host +
      `/message/filter` +
      '?ts=' +
      new Date().getTime() +
      (startDocumentId ? '&startDocumentId=' + encodeURIComponent(String(startDocumentId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => new PaginatedListMessage(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Get ids of messages matching the provided filter for the current user (HcParty)
   * @param body
   */
  async matchMessagesBy(body: AbstractFilterMessage): Promise<Array<string>> {
    const _url = this.host + `/message/match` + '?ts=' + new Date().getTime()
    let headers = await this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, body, this.fetchImpl, undefined, this.authenticationProvider.getAuthService())
      .then((doc) => (doc.body as Array<JSON>).map((it) => JSON.parse(JSON.stringify(it))))
      .catch((err) => this.handleError(err))
  }
}
