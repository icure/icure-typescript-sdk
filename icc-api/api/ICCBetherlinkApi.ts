/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class iccBetherlinkApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  doesLinkExist(token: string, body?: models.TherapeuticLink): Promise<boolean | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_therlink/therlink/check/{token}".replace("{token}", token + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  getAllTherapeuticLinks(
    token: string,
    hcPartyId: string,
    patientId: string,
    eid?: string,
    startDate?: number,
    endDate?: number,
    type?: string,
    sign?: boolean
  ): Promise<Array<models.TherapeuticLinkMessage> | any> {
    let _body = null

    const _url =
      this.host +
      "/be_therlink/therlink/{token}/{hcPartyId}/{patientId}"
        .replace("{token}", token + "")
        .replace("{hcPartyId}", hcPartyId + "")
        .replace("{patientId}", patientId + "") +
      "?ts=" +
      new Date().getTime() +
      (eid ? "&eid=" + eid : "") +
      (startDate ? "&startDate=" + startDate : "") +
      (endDate ? "&endDate=" + endDate : "") +
      (type ? "&type=" + type : "") +
      (sign ? "&sign=" + sign : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.TherapeuticLinkMessage(it)))
      .catch(err => this.handleError(err))
  }
  getPatientConsent(token: string, niss: string): Promise<models.ConsentMessage | any> {
    let _body = null

    const _url =
      this.host +
      "/be_therlink/consent/{token}/{niss}"
        .replace("{token}", token + "")
        .replace("{niss}", niss + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.ConsentMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  registerPatientConsent(
    token: string,
    niss: string,
    eid: string,
    firstName?: string,
    lastName?: string
  ): Promise<models.ConsentMessage | any> {
    let _body = null

    const _url =
      this.host +
      "/be_therlink/consent/{token}/{niss}/{eid}"
        .replace("{token}", token + "")
        .replace("{niss}", niss + "")
        .replace("{eid}", eid + "") +
      "?ts=" +
      new Date().getTime() +
      (firstName ? "&firstName=" + firstName : "") +
      (lastName ? "&lastName=" + lastName : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.ConsentMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  registerTherapeuticLink(
    token: string,
    hcPartyId: string,
    patientId: string,
    eid: string,
    startDate?: number,
    endDate?: number,
    type?: string,
    comment?: string,
    sign?: boolean
  ): Promise<models.TherapeuticLinkMessage | any> {
    let _body = null

    const _url =
      this.host +
      "/be_therlink/therlink/{token}/{hcPartyId}/{patientId}/{eid}"
        .replace("{token}", token + "")
        .replace("{hcPartyId}", hcPartyId + "")
        .replace("{patientId}", patientId + "")
        .replace("{eid}", eid + "") +
      "?ts=" +
      new Date().getTime() +
      (startDate ? "&startDate=" + startDate : "") +
      (endDate ? "&endDate=" + endDate : "") +
      (type ? "&type=" + type : "") +
      (comment ? "&comment=" + comment : "") +
      (sign ? "&sign=" + sign : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.TherapeuticLinkMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  revokePatientConsent(
    token: string,
    eid: string,
    body?: models.Consent
  ): Promise<models.ConsentMessage | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_therlink/consent/{token}/{eid}"
        .replace("{token}", token + "")
        .replace("{eid}", eid + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body)
      .then(doc => new models.ConsentMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  revokeTherapeuticLink(
    token: string,
    eid: string,
    body?: models.TherapeuticLink
  ): Promise<models.TherapeuticLinkMessage | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      "/be_therlink/therlink/revoke/{token}/{eid}"
        .replace("{token}", token + "")
        .replace("{eid}", eid + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body)
      .then(doc => new models.TherapeuticLinkMessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  setMapper(body?: models.MapperFacade): Promise<Array<models.TherapeuticLinkMessage> | any> {
    let _body = null
    _body = body

    const _url = this.host + "/be_therlink" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("DELETE", _url, headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.TherapeuticLinkMessage(it)))
      .catch(err => this.handleError(err))
  }
}
