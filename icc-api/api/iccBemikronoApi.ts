/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { AppointmentDto } from "../model/AppointmentDto"
import { AppointmentImportDto } from "../model/AppointmentImportDto"
import { EmailOrSmsMessageDto } from "../model/EmailOrSmsMessageDto"
import { MikronoAppointmentTypeRestDto } from "../model/MikronoAppointmentTypeRestDto"
import { MikronoCredentialsDto } from "../model/MikronoCredentialsDto"
import { Unit } from "../model/Unit"
import { User } from "../model/User"

export class iccBemikronoApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  /**
   *
   * @summary Get appointments for patient
   * @param calendarDate
   */
  appointmentsByDate(calendarDate: number): Promise<Array<AppointmentDto> | any> {
    let _body = null

    const _url =
      this.host +
      `/be_mikrono/appointments/byDate/${encodeURIComponent(String(calendarDate))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new AppointmentDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Get appointments for patient
   * @param patientId
   * @param from
   * @param to
   */
  appointmentsByPatient(
    patientId: string,
    from?: number,
    to?: number
  ): Promise<Array<AppointmentDto> | any> {
    let _body = null

    const _url =
      this.host +
      `/be_mikrono/appointments/byPatient/${encodeURIComponent(String(patientId))}` +
      "?ts=" +
      new Date().getTime() +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new AppointmentDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @param body
   */
  createAppointmentTypes(
    body?: Array<MikronoAppointmentTypeRestDto>
  ): Promise<Array<MikronoAppointmentTypeRestDto> | any> {
    let _body = null
    _body = body

    const _url = this.host + `/be_mikrono/appointmentTypes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new MikronoAppointmentTypeRestDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Create appointments for owner
   * @param body
   */
  createAppointments(body?: Array<AppointmentImportDto>): Promise<Array<string> | any> {
    let _body = null
    _body = body

    const _url = this.host + `/be_mikrono/appointments` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Notify of an appointment change
   * @param appointmentId
   * @param action
   */
  notify(appointmentId: string, action: string): Promise<any | Boolean> {
    let _body = null

    const _url =
      this.host +
      `/be_mikrono/notify/${encodeURIComponent(String(appointmentId))}/${encodeURIComponent(
        String(action)
      )}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Set credentials for provided user
   * @param body
   * @param userId
   */
  register(userId: string, body?: MikronoCredentialsDto): Promise<User | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/be_mikrono/user/${encodeURIComponent(String(userId))}/register` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new User(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Send message using mikrono from logged user
   * @param body
   */
  sendMessage(body?: EmailOrSmsMessageDto): Promise<Unit | any> {
    let _body = null
    _body = body

    const _url = this.host + `/be_mikrono/sendMessage` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Set credentials for provided user
   * @param body
   * @param userId
   */
  setUserCredentials(userId: string, body?: MikronoCredentialsDto): Promise<User | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/be_mikrono/user/${encodeURIComponent(String(userId))}/credentials` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new User(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
