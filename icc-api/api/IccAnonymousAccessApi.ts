/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { CalendarItemType } from '../model/CalendarItemType'
import { User } from '../model/User'

export class IccAnonymousAccessApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Get Availabilities for HCP and appointmentType
   * @param groupId
   * @param userId
   * @param getCalendarItemTypeId
   * @param startDate
   * @param endDate
   * @param hcpId
   * @param limit
   */
  getAvailabilitiesByPeriodAndCalendarItemTypeId(
    groupId: string,
    userId: string,
    getCalendarItemTypeId: string,
    startDate: number,
    endDate: number,
    hcpId: string,
    limit?: number
  ): Promise<Array<number>> {
    let _body = null

    const _url =
      this.host +
      `/aa/available/inGroup/${encodeURIComponent(String(groupId))}/forUser/${encodeURIComponent(String(userId))}/type/${encodeURIComponent(
        String(getCalendarItemTypeId)
      )}` +
      '?ts=' +
      new Date().getTime() +
      (startDate ? '&startDate=' + encodeURIComponent(String(startDate)) : '') +
      (endDate ? '&endDate=' + encodeURIComponent(String(endDate)) : '') +
      (hcpId ? '&hcpId=' + encodeURIComponent(String(hcpId)) : '') +
      (limit ? '&limit=' + encodeURIComponent(String(limit)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => JSON.parse(JSON.stringify(it))))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of Calendar Item types
   * @summary List Calendar Item types for a provided group id and user id
   * @param groupId Healthcare parties group id
   * @param userId Healthcare party user id
   * @param startDate
   * @param endDate
   */
  listAppointmentTypesForUser(groupId: string, userId: string, startDate: number, endDate: number): Promise<Array<CalendarItemType>> {
    let _body = null

    const _url =
      this.host +
      `/aa/appointmentType/inGroup/${encodeURIComponent(String(groupId))}/forUser/${encodeURIComponent(String(userId))}` +
      '?ts=' +
      new Date().getTime() +
      (startDate ? '&startDate=' + encodeURIComponent(String(startDate)) : '') +
      (endDate ? '&endDate=' + encodeURIComponent(String(endDate)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new CalendarItemType(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   * Returns a list of healthcare parties contained in the group owning the providing id
   * @summary List healthcare parties for a provided group id
   * @param groupId Healthcare parties group id
   */
  listHealthcarePartiesInGroup(groupId: string): Promise<Array<User>> {
    let _body = null

    const _url = this.host + `/aa/hcparty/inGroup/${encodeURIComponent(String(groupId))}` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new User(it)))
      .catch((err) => this.handleError(err))
  }
}
