/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { Contact } from '../model/Contact'
import { ResultInfo } from '../model/ResultInfo'

export class IccBeresultimportApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Can we handle this document
   * @param id
   * @param enckeys
   */
  canHandle(id: string, enckeys: string): Promise<boolean> {
    let _body = null

    const _url =
      this.host +
      `/be_result_import/canhandle/${encodeURIComponent(String(id))}` +
      '?ts=' +
      new Date().getTime() +
      (enckeys ? '&enckeys=' + encodeURIComponent(String(enckeys)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => JSON.parse(JSON.stringify(doc.body)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary import document
   * @param documentId
   * @param hcpId
   * @param language
   * @param protocolIds
   * @param formIds
   * @param planOfActionId
   * @param enckeys
   * @param ctc
   */
  doImport(
    documentId: string,
    hcpId: string,
    language: string,
    protocolIds: string,
    formIds: string,
    planOfActionId: string,
    enckeys: string,
    ctc: Contact
  ): Promise<Contact> {
    let _body = null
    _body = ctc

    const _url =
      this.host +
      `/be_result_import/import/${encodeURIComponent(String(documentId))}/${encodeURIComponent(String(hcpId))}/${encodeURIComponent(
        String(language)
      )}` +
      '?ts=' +
      new Date().getTime() +
      (protocolIds ? '&protocolIds=' + encodeURIComponent(String(protocolIds)) : '') +
      (formIds ? '&formIds=' + encodeURIComponent(String(formIds)) : '') +
      (planOfActionId ? '&planOfActionId=' + encodeURIComponent(String(planOfActionId)) : '') +
      (enckeys ? '&enckeys=' + encodeURIComponent(String(enckeys)) : '')
    let headers = this.headers
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new Contact(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Extract general infos from document
   * @param id
   * @param language
   * @param enckeys
   * @param full
   */
  getInfos(id: string, language: string, enckeys: string, full?: boolean): Promise<Array<ResultInfo>> {
    let _body = null

    const _url =
      this.host +
      `/be_result_import/infos/${encodeURIComponent(String(id))}` +
      '?ts=' +
      new Date().getTime() +
      (language ? '&language=' + encodeURIComponent(String(language)) : '') +
      (enckeys ? '&enckeys=' + encodeURIComponent(String(enckeys)) : '') +
      (full ? '&full=' + encodeURIComponent(String(full)) : '')
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new ResultInfo(it)))
      .catch((err) => this.handleError(err))
  }
}
