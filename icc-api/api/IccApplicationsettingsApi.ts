/**
 * iCure Data Stack API Documentation
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from './XHR'
import { ApplicationSettings } from '../model/ApplicationSettings'

export class IccApplicationsettingsApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map((k) => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Create new application settings
   * @param body
   */
  createApplicationSettings(body?: ApplicationSettings): Promise<ApplicationSettings> {
    let _body = null
    _body = body

    const _url = this.host + `/appsettings` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('POST', _url, headers, _body, this.fetchImpl)
      .then((doc) => new ApplicationSettings(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Gets all application settings
   */
  getApplicationSettings(): Promise<Array<ApplicationSettings>> {
    let _body = null

    const _url = this.host + `/appsettings` + '?ts=' + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand('GET', _url, headers, _body, this.fetchImpl)
      .then((doc) => (doc.body as Array<JSON>).map((it) => new ApplicationSettings(it)))
      .catch((err) => this.handleError(err))
  }

  /**
   *
   * @summary Update application settings
   * @param body
   */
  updateApplicationSettings(body?: ApplicationSettings): Promise<ApplicationSettings> {
    let _body = null
    _body = body

    const _url = this.host + `/appsettings` + '?ts=' + new Date().getTime()
    let headers = this.headers
    headers = headers.filter((h) => h.header !== 'Content-Type').concat(new XHR.Header('Content-Type', 'application/json'))
    return XHR.sendCommand('PUT', _url, headers, _body, this.fetchImpl)
      .then((doc) => new ApplicationSettings(doc.body as JSON))
      .catch((err) => this.handleError(err))
  }
}
