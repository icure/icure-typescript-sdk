"use strict"
/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true })
const XHR_1 = require("./XHR")
const models = require("../model/models")
class iccCodeApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }
  createCode(body) {
    let _body = null
    _body = body
    const _url = this.host + "/code" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body))
      .catch(err => this.handleError(err))
  }
  filterBy(startKey, startDocumentId, limit, skip, sort, desc, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/code/filter" +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (skip ? "&skip=" + skip : "") +
      (sort ? "&sort=" + sort : "") +
      (desc ? "&desc=" + desc : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findCodeTypes(region, type) {
    let _body = null
    const _url =
      this.host +
      "/code/codetype/byRegionType" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  findCodes(region, type, code, version) {
    let _body = null
    const _url =
      this.host +
      "/code/byRegionTypeCode" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "") +
      (code ? "&code=" + code : "") +
      (version ? "&version=" + version : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.CodeDto(it)))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodes(region, type, code, version, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/code" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "") +
      (code ? "&code=" + code : "") +
      (version ? "&version=" + version : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodesByLabel(region, types, language, label, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/code/byLabel" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (types ? "&types=" + types : "") +
      (language ? "&language=" + language : "") +
      (label ? "&label=" + label : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findPaginatedCodesWithLink(linkType, linkedId, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/code/link/{linkType}".replace("{linkType}", linkType + "") +
      "?ts=" +
      new Date().getTime() +
      (linkedId ? "&linkedId=" + linkedId : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findTagTypes(region, type) {
    let _body = null
    const _url =
      this.host +
      "/code/tagtype/byRegionType" +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + region : "") +
      (type ? "&type=" + type : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  getCode(codeId) {
    let _body = null
    const _url =
      this.host + "/code/{codeId}".replace("{codeId}", codeId + "") + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body))
      .catch(err => this.handleError(err))
  }
  getCodeWithParts(type, code, version) {
    let _body = null
    const _url =
      this.host +
      "/code/{type}/{code}/{version}"
        .replace("{type}", type + "")
        .replace("{code}", code + "")
        .replace("{version}", version + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body))
      .catch(err => this.handleError(err))
  }
  getCodes(codeIds) {
    let _body = null
    const _url =
      this.host +
      "/code/byIds/{codeIds}".replace("{codeIds}", codeIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.CodeDto(it)))
      .catch(err => this.handleError(err))
  }
  modifyCode(body) {
    let _body = null
    _body = body
    const _url = this.host + "/code" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.CodeDto(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.iccCodeApi = iccCodeApi
//# sourceMappingURL=iccCodeApi.js.map
