/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { XHR } from "./XHR"
import * as models from "../model/models"
export declare class iccInvoiceApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.Data): void
  appendCodes(
    userId: string,
    type: string,
    sentMediumType: string,
    insuranceId?: string,
    secretFKeys?: string,
    invoiceId?: string,
    gracePriod?: number,
    body?: Array<models.InvoicingCodeDto>
  ): Promise<Array<models.InvoiceDto> | any>
  createInvoice(body?: models.InvoiceDto): Promise<models.InvoiceDto | any>
  deleteInvoice(invoiceId: string): Promise<any | Boolean>
  filterBy(body?: models.FilterChain): Promise<Array<any> | any>
  findByAuthor(
    hcPartyId: string,
    fromDate?: number,
    toDate?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.InvoicePaginatedList | any>
  findByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string
  ): Promise<Array<models.InvoiceDto> | any>
  findDelegationsStubsByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string
  ): Promise<Array<models.IcureStubDto> | any>
  getInvoice(invoiceId: string): Promise<models.InvoiceDto | any>
  getInvoices(body?: models.ListOfIdsDto): Promise<Array<models.InvoiceDto> | any>
  getTarificationsCodesOccurences(
    minOccurences: number
  ): Promise<Array<models.LabelledOccurenceDto> | any>
  listAllHcpsByStatus(
    status: string,
    from?: number,
    to?: number,
    body?: models.ListOfIdsDto
  ): Promise<Array<models.InvoiceDto> | any>
  listByContactIds(body?: models.ListOfIdsDto): Promise<Array<models.InvoiceDto> | any>
  listByHcPartyGroupId(hcPartyId: string, groupId: string): Promise<Array<models.InvoiceDto> | any>
  listByHcPartySentMediumTypeInvoiceTypeSentDate(
    hcPartyId: string,
    sentMediumType: "cdrom" | "eattest" | "efact" | "email" | "mediprima" | "paper",
    invoiceType: "patient" | "mutualfund" | "payingagency" | "insurance" | "efact" | "other",
    sent: boolean,
    from?: number,
    to?: number
  ): Promise<Array<models.InvoiceDto> | any>
  listByHcpartySendingModeStatusDate(
    hcPartyId: string,
    sendingMode?: string,
    status?: string,
    from?: number,
    to?: number
  ): Promise<Array<models.InvoiceDto> | any>
  listByIds(invoiceIds: string): Promise<Array<models.InvoiceDto> | any>
  listByRecipientsIds(recipientIds: string): Promise<Array<models.InvoiceDto> | any>
  listByServiceIds(serviceIds: string): Promise<Array<models.InvoiceDto> | any>
  listToInsurances(userIds?: string): Promise<Array<models.InvoiceDto> | any>
  listToInsurancesUnsent(userIds?: string): Promise<Array<models.InvoiceDto> | any>
  listToPatients(hcPartyId?: string): Promise<Array<models.InvoiceDto> | any>
  listToPatientsUnsent(hcPartyId?: string): Promise<Array<models.InvoiceDto> | any>
  mergeTo(invoiceId: string, body?: models.ListOfIdsDto): Promise<models.InvoiceDto | any>
  modifyInvoice(body?: models.InvoiceDto): Promise<models.InvoiceDto | any>
  newDelegations(
    invoiceId: string,
    body?: Array<models.DelegationDto>
  ): Promise<models.InvoiceDto | any>
  reassignInvoice(body?: models.InvoiceDto): Promise<models.InvoiceDto | any>
  removeCodes(
    userId: string,
    serviceId: string,
    secretFKeys?: string,
    body?: Array<string>
  ): Promise<Array<models.InvoiceDto> | any>
  setInvoicesDelegations(body?: Array<models.IcureStubDto>): Promise<any | Boolean>
  validate(
    invoiceId: string,
    scheme?: string,
    forcedValue?: string
  ): Promise<models.InvoiceDto | any>
}
