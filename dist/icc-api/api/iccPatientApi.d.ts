/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { XHR } from "./XHR"
import * as models from "../model/models"
export declare class iccPatientApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.Data): void
  bulkUpdatePatients(body?: Array<models.PatientDto>): Promise<Array<models.IdWithRevDto> | any>
  countOfPatients(hcPartyId: string): Promise<models.ContentDto | any>
  createPatient(body?: models.PatientDto): Promise<models.PatientDto | any>
  deletePatient(patientIds: string): Promise<Array<string> | any>
  filterBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    skip?: number,
    sort?: string,
    desc?: boolean,
    body?: models.FilterChain
  ): Promise<models.PatientPaginatedList | any>
  findByAccessLogUserAfterDate(
    userId: string,
    accessType?: string,
    startDate?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  findByExternalId(externalId: string): Promise<models.PatientDto | any>
  findByNameBirthSsinAuto(
    healthcarePartyId?: string,
    filterValue?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    sortDirection?: string
  ): Promise<models.PatientPaginatedList | any>
  findDuplicatesByName(
    hcPartyId?: string,
    startKey?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  findDuplicatesBySsin(
    hcPartyId?: string,
    startKey?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  fuzzySearch(
    firstName?: string,
    lastName?: string,
    dateOfBirth?: number
  ): Promise<Array<models.PatientDto> | any>
  getHcPartyKeysForDelegate(
    healthcarePartyId: string
  ): Promise<
    | {
        [key: string]: string
      }
    | any
  >
  getPatient(patientId: string): Promise<models.PatientDto | any>
  getPatients(body?: models.ListOfIdsDto): Promise<Array<models.PatientDto> | any>
  listDeletedPatients(
    startDate?: number,
    endDate?: number,
    desc?: boolean,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  listDeletedPatientsByName(
    firstName?: string,
    lastName?: string
  ): Promise<Array<models.PatientPaginatedList> | any>
  listOfMergesAfter(date: number): Promise<Array<models.PatientDto> | any>
  listOfPatientsModifiedAfter(
    date: number,
    startKey?: number,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  listPatients(
    hcPartyId?: string,
    sortField?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    sortDirection?: string
  ): Promise<models.PatientPaginatedList | any>
  listPatientsByHcParty(
    hcPartyId: string,
    sortField?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    sortDirection?: string
  ): Promise<models.PatientPaginatedList | any>
  listPatientsIds(
    hcPartyId?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.PatientPaginatedList | any>
  listPatientsOfHcParty(
    hcPartyId: string,
    sortField?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    sortDirection?: string
  ): Promise<models.PatientPaginatedList | any>
  matchBy(body?: models.Filter): Promise<Array<string> | any>
  mergeInto(toId: string, fromIds: string): Promise<models.PatientDto | any>
  modifyPatient(body?: models.PatientDto): Promise<models.PatientDto | any>
  modifyPatientReferral(
    patientId: string,
    referralId: string,
    start?: number,
    end?: number
  ): Promise<models.PatientDto | any>
  newDelegations(
    patientId: string,
    body?: Array<models.DelegationDto>
  ): Promise<models.PatientDto | any>
  undeletePatient(patientIds: string): Promise<Array<string> | any>
}
