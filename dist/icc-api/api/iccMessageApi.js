"use strict"
/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true })
const XHR_1 = require("./XHR")
const models = require("../model/models")
class iccMessageApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }
  createMessage(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessageDto(doc.body))
      .catch(err => this.handleError(err))
  }
  deleteDelegation(messageId, delegateId) {
    let _body = null
    const _url =
      this.host +
      "/message/{messageId}/delegate/{delegateId}"
        .replace("{messageId}", messageId + "")
        .replace("{delegateId}", delegateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessageDto(doc.body))
      .catch(err => this.handleError(err))
  }
  deleteMessages(messageIds) {
    let _body = null
    const _url =
      this.host +
      "/message/{messageIds}".replace("{messageIds}", messageIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }
  deleteMessagesBatch(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message/delete/byIds" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }
  findByHCPartyPatientSecretFKeys(secretFKeys) {
    let _body = null
    const _url =
      this.host +
      "/message/byHcPartySecretForeignKeys" +
      "?ts=" +
      new Date().getTime() +
      (secretFKeys ? "&secretFKeys=" + secretFKeys : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
  findMessages(startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/message" +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessagePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findMessagesByFromAddress(fromAddress, startKey, startDocumentId, limit, hcpId) {
    let _body = null
    const _url =
      this.host +
      "/message/byFromAddress" +
      "?ts=" +
      new Date().getTime() +
      (fromAddress ? "&fromAddress=" + fromAddress : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (hcpId ? "&hcpId=" + hcpId : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessagePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findMessagesByToAddress(toAddress, startKey, startDocumentId, limit, reverse, hcpId) {
    let _body = null
    const _url =
      this.host +
      "/message/byToAddress" +
      "?ts=" +
      new Date().getTime() +
      (toAddress ? "&toAddress=" + toAddress : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (reverse ? "&reverse=" + reverse : "") +
      (hcpId ? "&hcpId=" + hcpId : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessagePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findMessagesByTransportGuid(transportGuid, received, startKey, startDocumentId, limit, hcpId) {
    let _body = null
    const _url =
      this.host +
      "/message/byTransportGuid" +
      "?ts=" +
      new Date().getTime() +
      (transportGuid ? "&transportGuid=" + transportGuid : "") +
      (received ? "&received=" + received : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (hcpId ? "&hcpId=" + hcpId : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessagePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findMessagesByTransportGuidSentDate(
    transportGuid,
    from,
    to,
    startKey,
    startDocumentId,
    limit,
    hcpId
  ) {
    let _body = null
    const _url =
      this.host +
      "/message/byTransportGuidSentDate" +
      "?ts=" +
      new Date().getTime() +
      (transportGuid ? "&transportGuid=" + transportGuid : "") +
      (from ? "&from=" + from : "") +
      (to ? "&to=" + to : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (hcpId ? "&hcpId=" + hcpId : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessagePaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  getChildren(messageId) {
    let _body = null
    const _url =
      this.host +
      "/message/{messageId}/children".replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
  getChildrenOfList(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message/children/batch" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  getMessage(messageId) {
    let _body = null
    const _url =
      this.host +
      "/message/{messageId}".replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessageDto(doc.body))
      .catch(err => this.handleError(err))
  }
  listMessagesByInvoiceIds(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message/byInvoiceId" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
  modifyMessage(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessageDto(doc.body))
      .catch(err => this.handleError(err))
  }
  newDelegations(messageId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/message/{messageId}/delegate".replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.MessageDto(doc.body))
      .catch(err => this.handleError(err))
  }
  setMessagesReadStatus(body) {
    let _body = null
    _body = body
    const _url = this.host + "/message/readstatus" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
  setMessagesStatusBits(status, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/message/status/{status}".replace("{status}", status + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.MessageDto(it)))
      .catch(err => this.handleError(err))
  }
}
exports.iccMessageApi = iccMessageApi
//# sourceMappingURL=iccMessageApi.js.map
