"use strict"
/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true })
const XHR_1 = require("./XHR")
const models = require("../model/models")
class iccDoctemplateApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }
  createDocumentTemplate(body) {
    let _body = null
    _body = body
    const _url = this.host + "/doctemplate" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  deleteDocumentTemplate(documentTemplateIds) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/{documentTemplateIds}".replace(
        "{documentTemplateIds}",
        documentTemplateIds + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentDto(doc.body))
      .catch(err => this.handleError(err))
  }
  findAllDocumentTemplates() {
    let _body = null
    const _url = this.host + "/doctemplate/find/all" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.DocumentTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  findDocumentTemplates() {
    let _body = null
    const _url = this.host + "/doctemplate" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.DocumentTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  findDocumentTemplatesByDocumentType(documentTypeCode) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/byDocumentType/{documentTypeCode}".replace(
        "{documentTypeCode}",
        documentTypeCode + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.DocumentTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  findDocumentTemplatesByDocumentTypeForCurrentUser(documentTypeCode) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/byDocumentTypeForCurrentUser/{documentTypeCode}".replace(
        "{documentTypeCode}",
        documentTypeCode + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.DocumentTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  findDocumentTemplatesBySpeciality(specialityCode) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/bySpecialty/{specialityCode}".replace("{specialityCode}", specialityCode + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.DocumentTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  getAttachment(documentTemplateId, attachmentId) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}/attachment/{attachmentId}"
        .replace("{documentTemplateId}", documentTemplateId + "")
        .replace("{attachmentId}", attachmentId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  getAttachmentText(documentTemplateId, attachmentId) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}/attachmentText/{attachmentId}"
        .replace("{documentTemplateId}", documentTemplateId + "")
        .replace("{attachmentId}", attachmentId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  getDocumentTemplate(documentTemplateId) {
    let _body = null
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}".replace("{documentTemplateId}", documentTemplateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  setAttachment(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}/attachment".replace(
        "{documentTemplateId}",
        documentTemplateId + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  setAttachmentJson(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}/attachmentJson".replace(
        "{documentTemplateId}",
        documentTemplateId + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  updateDocumentTemplate(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/doctemplate/{documentTemplateId}".replace("{documentTemplateId}", documentTemplateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.DocumentTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.iccDoctemplateApi = iccDoctemplateApi
//# sourceMappingURL=iccDoctemplateApi.js.map
