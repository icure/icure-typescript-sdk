/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { XHR } from "./XHR"
import * as models from "../model/models"
export declare class iccFormApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.Data): void
  convertLegacyFormTemplates(body?: Array<string>): Promise<Array<models.FormLayout> | any>
  createForm(body?: models.FormDto): Promise<models.FormDto | any>
  createFormTemplate(body?: models.FormTemplateDto): Promise<models.FormTemplateDto | any>
  deleteFormTemplate(formTemplateId: string): Promise<boolean | any>
  deleteForms(formIds: string): Promise<Array<string> | any>
  findByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string,
    healthElementId?: string,
    planOfActionId?: string,
    formTemplateId?: string
  ): Promise<Array<models.FormDto> | any>
  findDelegationsStubsByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string
  ): Promise<Array<models.IcureStubDto> | any>
  findFormTemplates(loadLayout?: boolean): Promise<Array<models.FormTemplateDto> | any>
  findFormTemplatesBySpeciality(
    specialityCode: string,
    loadLayout?: boolean
  ): Promise<Array<models.FormTemplateDto> | any>
  getChildren(formId: string, hcPartyId: string): Promise<Array<models.FormDto> | any>
  getForm(formId: string): Promise<models.FormDto | any>
  getFormTemplate(formTemplateId: string): Promise<models.FormTemplateDto | any>
  getFormTemplatesByGuid(
    formTemplateGuid: string,
    specialityCode: string
  ): Promise<Array<models.FormTemplateDto> | any>
  getForms(body?: models.ListOfIdsDto): Promise<Array<models.FormDto> | any>
  modifyForm(body?: models.FormDto): Promise<models.FormDto | any>
  modifyForms(body?: Array<models.FormDto>): Promise<Array<models.FormDto> | any>
  newDelegations(formId: string, body?: Array<models.DelegationDto>): Promise<models.FormDto | any>
  setAttachmentMulti(formTemplateId: string, attachment?: Array<string>): Promise<string | any>
  setFormsDelegations(body?: Array<models.IcureStubDto>): Promise<any | Boolean>
  updateFormTemplate(
    formTemplateId: string,
    body?: models.FormTemplateDto
  ): Promise<models.FormTemplateDto | any>
}
