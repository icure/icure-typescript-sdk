"use strict"
/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true })
const XHR_1 = require("./XHR")
const models = require("../model/models")
class iccPatientApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }
  bulkUpdatePatients(body) {
    let _body = null
    _body = body
    const _url = this.host + "/patient/bulk" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.IdWithRevDto(it)))
      .catch(err => this.handleError(err))
  }
  countOfPatients(hcPartyId) {
    let _body = null
    const _url =
      this.host +
      "/patient/hcParty/{hcPartyId}/count".replace("{hcPartyId}", hcPartyId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.ContentDto(doc.body))
      .catch(err => this.handleError(err))
  }
  createPatient(body) {
    let _body = null
    _body = body
    const _url = this.host + "/patient" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  deletePatient(patientIds) {
    let _body = null
    const _url =
      this.host +
      "/patient/{patientIds}".replace("{patientIds}", patientIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  filterBy(startKey, startDocumentId, limit, skip, sort, desc, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/patient/filter" +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (skip ? "&skip=" + skip : "") +
      (sort ? "&sort=" + sort : "") +
      (desc ? "&desc=" + desc : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findByAccessLogUserAfterDate(userId, accessType, startDate, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/byAccess/{userId}".replace("{userId}", userId + "") +
      "?ts=" +
      new Date().getTime() +
      (accessType ? "&accessType=" + accessType : "") +
      (startDate ? "&startDate=" + startDate : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findByExternalId(externalId) {
    let _body = null
    const _url =
      this.host +
      "/patient/byExternalId/{externalId}".replace("{externalId}", externalId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  findByNameBirthSsinAuto(
    healthcarePartyId,
    filterValue,
    startKey,
    startDocumentId,
    limit,
    sortDirection
  ) {
    let _body = null
    const _url =
      this.host +
      "/patient/byNameBirthSsinAuto" +
      "?ts=" +
      new Date().getTime() +
      (healthcarePartyId ? "&healthcarePartyId=" + healthcarePartyId : "") +
      (filterValue ? "&filterValue=" + filterValue : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (sortDirection ? "&sortDirection=" + sortDirection : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findDuplicatesByName(hcPartyId, startKey, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/duplicates/name" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  findDuplicatesBySsin(hcPartyId, startKey, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/duplicates/ssin" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  fuzzySearch(firstName, lastName, dateOfBirth) {
    let _body = null
    const _url =
      this.host +
      "/patient/fuzzy" +
      "?ts=" +
      new Date().getTime() +
      (firstName ? "&firstName=" + firstName : "") +
      (lastName ? "&lastName=" + lastName : "") +
      (dateOfBirth ? "&dateOfBirth=" + dateOfBirth : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.PatientDto(it)))
      .catch(err => this.handleError(err))
  }
  getHcPartyKeysForDelegate(healthcarePartyId) {
    let _body = null
    const _url =
      this.host +
      "/patient/{healthcarePartyId}/keys".replace("{healthcarePartyId}", healthcarePartyId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  getPatient(patientId) {
    let _body = null
    const _url =
      this.host +
      "/patient/{patientId}".replace("{patientId}", patientId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  getPatients(body) {
    let _body = null
    _body = body
    const _url = this.host + "/patient/byIds" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.PatientDto(it)))
      .catch(err => this.handleError(err))
  }
  listDeletedPatients(startDate, endDate, desc, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/deleted/by_date" +
      "?ts=" +
      new Date().getTime() +
      (startDate ? "&startDate=" + startDate : "") +
      (endDate ? "&endDate=" + endDate : "") +
      (desc ? "&desc=" + desc : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  listDeletedPatientsByName(firstName, lastName) {
    let _body = null
    const _url =
      this.host +
      "/patient/deleted/by_name" +
      "?ts=" +
      new Date().getTime() +
      (firstName ? "&firstName=" + firstName : "") +
      (lastName ? "&lastName=" + lastName : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.PatientPaginatedList(it)))
      .catch(err => this.handleError(err))
  }
  listOfMergesAfter(date) {
    let _body = null
    const _url =
      this.host +
      "/patient/merges/{date}".replace("{date}", date + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.PatientDto(it)))
      .catch(err => this.handleError(err))
  }
  listOfPatientsModifiedAfter(date, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/modifiedAfter/{date}".replace("{date}", date + "") +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  listPatients(hcPartyId, sortField, startKey, startDocumentId, limit, sortDirection) {
    let _body = null
    const _url =
      this.host +
      "/patient" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (sortField ? "&sortField=" + sortField : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (sortDirection ? "&sortDirection=" + sortDirection : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  listPatientsByHcParty(hcPartyId, sortField, startKey, startDocumentId, limit, sortDirection) {
    let _body = null
    const _url =
      this.host +
      "/patient/hcParty/{hcPartyId}".replace("{hcPartyId}", hcPartyId + "") +
      "?ts=" +
      new Date().getTime() +
      (sortField ? "&sortField=" + sortField : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (sortDirection ? "&sortDirection=" + sortDirection : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  listPatientsIds(hcPartyId, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      "/patient/idsPages" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  listPatientsOfHcParty(hcPartyId, sortField, startKey, startDocumentId, limit, sortDirection) {
    let _body = null
    const _url =
      this.host +
      "/patient/ofHcParty/{hcPartyId}".replace("{hcPartyId}", hcPartyId + "") +
      "?ts=" +
      new Date().getTime() +
      (sortField ? "&sortField=" + sortField : "") +
      (startKey ? "&startKey=" + startKey : "") +
      (startDocumentId ? "&startDocumentId=" + startDocumentId : "") +
      (limit ? "&limit=" + limit : "") +
      (sortDirection ? "&sortDirection=" + sortDirection : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientPaginatedList(doc.body))
      .catch(err => this.handleError(err))
  }
  matchBy(body) {
    let _body = null
    _body = body
    const _url = this.host + "/patient/match" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  mergeInto(toId, fromIds) {
    let _body = null
    const _url =
      this.host +
      "/patient/mergeInto/{toId}/from/{fromIds}"
        .replace("{toId}", toId + "")
        .replace("{fromIds}", fromIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  modifyPatient(body) {
    let _body = null
    _body = body
    const _url = this.host + "/patient" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  modifyPatientReferral(patientId, referralId, start, end) {
    let _body = null
    const _url =
      this.host +
      "/patient/{patientId}/referral/{referralId}"
        .replace("{patientId}", patientId + "")
        .replace("{referralId}", referralId + "") +
      "?ts=" +
      new Date().getTime() +
      (start ? "&start=" + start : "") +
      (end ? "&end=" + end : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  newDelegations(patientId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/patient/{patientId}/delegate".replace("{patientId}", patientId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.PatientDto(doc.body))
      .catch(err => this.handleError(err))
  }
  undeletePatient(patientIds) {
    let _body = null
    const _url =
      this.host +
      "/patient/undelete/{patientIds}".replace("{patientIds}", patientIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
}
exports.iccPatientApi = iccPatientApi
//# sourceMappingURL=iccPatientApi.js.map
