"use strict"
/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true })
const XHR_1 = require("./XHR")
const models = require("../model/models")
class iccFormApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }
  convertLegacyFormTemplates(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form/template/legacy" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormLayout(it)))
      .catch(err => this.handleError(err))
  }
  createForm(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormDto(doc.body))
      .catch(err => this.handleError(err))
  }
  createFormTemplate(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form/template" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  deleteFormTemplate(formTemplateId) {
    let _body = null
    const _url =
      this.host +
      "/form/template/{formTemplateId}".replace("{formTemplateId}", formTemplateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  deleteForms(formIds) {
    let _body = null
    const _url =
      this.host +
      "/form/{formIds}".replace("{formIds}", formIds + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  findByHCPartyPatientSecretFKeys(
    hcPartyId,
    secretFKeys,
    healthElementId,
    planOfActionId,
    formTemplateId
  ) {
    let _body = null
    const _url =
      this.host +
      "/form/byHcPartySecretForeignKeys" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (secretFKeys ? "&secretFKeys=" + secretFKeys : "") +
      (healthElementId ? "&healthElementId=" + healthElementId : "") +
      (planOfActionId ? "&planOfActionId=" + planOfActionId : "") +
      (formTemplateId ? "&formTemplateId=" + formTemplateId : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormDto(it)))
      .catch(err => this.handleError(err))
  }
  findDelegationsStubsByHCPartyPatientSecretFKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      "/form/byHcPartySecretForeignKeys/delegations" +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + hcPartyId : "") +
      (secretFKeys ? "&secretFKeys=" + secretFKeys : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.IcureStubDto(it)))
      .catch(err => this.handleError(err))
  }
  findFormTemplates(loadLayout) {
    let _body = null
    const _url =
      this.host +
      "/form/template" +
      "?ts=" +
      new Date().getTime() +
      (loadLayout ? "&loadLayout=" + loadLayout : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  findFormTemplatesBySpeciality(specialityCode, loadLayout) {
    let _body = null
    const _url =
      this.host +
      "/form/template/bySpecialty/{specialityCode}".replace(
        "{specialityCode}",
        specialityCode + ""
      ) +
      "?ts=" +
      new Date().getTime() +
      (loadLayout ? "&loadLayout=" + loadLayout : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  getChildren(formId, hcPartyId) {
    let _body = null
    const _url =
      this.host +
      "/form/childrenOf/{formId}/{hcPartyId}"
        .replace("{formId}", formId + "")
        .replace("{hcPartyId}", hcPartyId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormDto(it)))
      .catch(err => this.handleError(err))
  }
  getForm(formId) {
    let _body = null
    const _url =
      this.host + "/form/{formId}".replace("{formId}", formId + "") + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormDto(doc.body))
      .catch(err => this.handleError(err))
  }
  getFormTemplate(formTemplateId) {
    let _body = null
    const _url =
      this.host +
      "/form/template/{formTemplateId}".replace("{formTemplateId}", formTemplateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
  getFormTemplatesByGuid(formTemplateGuid, specialityCode) {
    let _body = null
    const _url =
      this.host +
      "/form/template/{specialityCode}/guid/{formTemplateGuid}"
        .replace("{formTemplateGuid}", formTemplateGuid + "")
        .replace("{specialityCode}", specialityCode + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormTemplateDto(it)))
      .catch(err => this.handleError(err))
  }
  getForms(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form/byIds" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormDto(it)))
      .catch(err => this.handleError(err))
  }
  modifyForm(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormDto(doc.body))
      .catch(err => this.handleError(err))
  }
  modifyForms(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form/batch" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new models.FormDto(it)))
      .catch(err => this.handleError(err))
  }
  newDelegations(formId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/form/delegate/{formId}".replace("{formId}", formId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormDto(doc.body))
      .catch(err => this.handleError(err))
  }
  setAttachmentMulti(formTemplateId, attachment) {
    let _body = null
    attachment &&
      (_body = _body || new FormData()).append(
        "attachment",
        new Blob(attachment, { type: "application/octet-stream" })
      )
    const _url =
      this.host +
      "/form/template/{formTemplateId}/attachment/multipart".replace(
        "{formTemplateId}",
        formTemplateId + ""
      ) +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "multipart/form-data"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  setFormsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + "/form/delegations" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }
  updateFormTemplate(formTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      "/form/template/{formTemplateId}".replace("{formTemplateId}", formTemplateId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new models.FormTemplateDto(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.iccFormApi = iccFormApi
//# sourceMappingURL=iccFormApi.js.map
