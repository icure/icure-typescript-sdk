/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { XHR } from "./XHR"
import * as models from "../model/models"
export declare class iccContactApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.Data): void
  closeForHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string
  ): Promise<Array<models.ContactDto> | any>
  createContact(body?: models.ContactDto): Promise<models.ContactDto | any>
  deleteContacts(contactIds: string): Promise<Array<string> | any>
  filterBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    body?: models.FilterChain
  ): Promise<models.ContactPaginatedList | any>
  filterServicesBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    body?: models.FilterChain
  ): Promise<models.ServicePaginatedList | any>
  findByHCPartyFormId(hcPartyId?: string, formId?: string): Promise<Array<models.ContactDto> | any>
  findByHCPartyFormIds(
    hcPartyId?: string,
    body?: models.ListOfIdsDto
  ): Promise<Array<models.ContactDto> | any>
  findByHCPartyPatientForeignKeys(
    hcPartyId?: string,
    body?: models.ListOfIdsDto
  ): Promise<Array<models.ContactDto> | any>
  findByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string,
    planOfActionIds?: string,
    skipClosedContacts?: boolean
  ): Promise<Array<models.ContactDto> | any>
  findDelegationsStubsByHCPartyPatientSecretFKeys(
    hcPartyId?: string,
    secretFKeys?: string
  ): Promise<Array<models.ContactDto> | any>
  getContact(contactId: string): Promise<models.ContactDto | any>
  getContacts(body?: models.ListOfIdsDto): Promise<Array<models.ContactDto> | any>
  getEmptyContent(): Promise<models.ContentDto | any>
  getServiceCodesOccurences(
    codeType: string,
    minOccurences: number
  ): Promise<Array<models.LabelledOccurenceDto> | any>
  listContactsByOpeningDate(
    startKey: number,
    endKey: number,
    hcpartyid: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<models.ContactPaginatedList | any>
  matchBy(body?: models.Filter): Promise<Array<string> | any>
  modifyContact(body?: models.ContactDto): Promise<models.ContactDto | any>
  modifyContacts(body?: Array<models.ContactDto>): Promise<Array<models.ContactDto> | any>
  newDelegations(contactId: string, body?: models.DelegationDto): Promise<models.ContactDto | any>
  setContactsDelegations(body?: Array<models.IcureStubDto>): Promise<any | Boolean>
}
